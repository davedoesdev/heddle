DIR_PKGCONFIG="pkg-config-0.28"
SRC_PKGCONFIG="$DIR_PKGCONFIG.tar.gz"
URL_PKGCONFIG="http://pkgconfig.freedesktop.org/releases/$SRC_PKGCONFIG"
CHK_PKGCONFIG="71853779b12f958777bffcb8ca6d849b4d3bed46"
SUM_PKGCONFIG="sha1"
BLD_PKGCONFIG() {
  ./configure "--prefix=$INSTALL_DIR" --with-internal-glib
  make
  make install
}
PST_PKGCONFIG() {
  export PKG_CONFIG_PATH="$(pkg-config --variable pc_path pkg-config)"
}

DIR_LIBICONV="libiconv-1.14"
SRC_LIBICONV="$DIR_LIBICONV.tar.gz"
URL_LIBICONV="http://ftp.gnu.org/pub/gnu/libiconv/$SRC_LIBICONV"
CHK_LIBICONV="be7d67e50d72ff067b2c0291311bc283add36965"
SUM_LIBICONV="sha1"
BLD_LIBICONV() {
  rm -f "$INSTALL_DIR"/bin/*pkg-config*
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBICONV() {
  :
}

DIR_LIBFFI="libffi-3.1"
SRC_LIBFFI="$DIR_LIBFFI.tar.gz"
URL_LIBFFI="ftp://sourceware.org/pub/libffi/$SRC_LIBFFI"
CHK_LIBFFI="f5898b29bbfd70502831a212d9249d10"
SUM_LIBFFI="md5"
BLD_LIBFFI() {
  ./configure "--prefix=$INSTALL_DIR"
  sed -i 's/tail -1/tail -n 1/g' Makefile
  make
  make install
}
PST_LIBFFI() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/lib/$DIR_LIBFFI/include"
  LDFLAGS="$LDFLAGS -L$INSTALL_DIR/lib64"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/lib64"
}

DIR_BDB="db-4.8.30"
SRC_BDB="$DIR_BDB.tar.gz"
URL_BDB="http://download.oracle.com/berkeley-db/$SRC_BDB"
CHK_BDB="ab36c170dda5b2ceaad3915ced96e41c6b7e493c"
SUM_BDB="sha1"
BLD_BDB() {
  cd build_unix
  ../dist/configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_BDB() {
  :
}

DIR_GDBM="gdbm-1.11"
SRC_GDBM="$DIR_GDBM.tar.gz"
URL_GDBM="ftp://ftp.gnu.org/gnu/gdbm/$SRC_GDBM"
CHK_GDBM="72c832680cf0999caedbe5b265c8c1bd"
SUM_GDBM="md5"
BLD_GDBM() {
  ./configure "--prefix=$INSTALL_DIR" --enable-libgdbm-compat
  make
  make install
}
PST_GDBM() {
  :
}

DIR_BZIP2="bzip2-1.0.6"
SRC_BZIP2="$DIR_BZIP2.tar.gz"
URL_BZIP2="http://www.bzip.org/1.0.6/$SRC_BZIP2"
CHK_BZIP2="00b516f4704d4a7cb50a1d97e6e8e15b"
SUM_BZIP2="md5"
BLD_BZIP2() {
  make -f Makefile-libbz2_so
  make
  make install "PREFIX=$INSTALL_DIR"
  rm -f "$INSTALL_DIR"/lib/libbz2.so*
  cp -a libbz2.so* "$INSTALL_DIR/lib"
  ( cd "$INSTALL_DIR/lib"; ln -s libbz2.so.1.0 libbz2.so )
}
PST_BZIP2() {
  :
}

DIR_ZLIB="zlib-1.2.8"
SRC_ZLIB="$DIR_ZLIB.tar.gz"
URL_ZLIB="http://zlib.net/$SRC_ZLIB"
CHK_ZLIB="44d667c142d7cda120332623eab69f40"
SUM_ZLIB="md5"
BLD_ZLIB() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_ZLIB() {
  :
}

DIR_SQLITE="sqlite-autoconf-3080701"
SRC_SQLITE="$DIR_SQLITE.tar.gz"
URL_SQLITE="http://www.sqlite.org/2014/$SRC_SQLITE"
CHK_SQLITE="5601be1263842209d7c5dbf6128f1cc0b6bbe2e5"
SUM_SQLITE="sha1"
BLD_SQLITE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_SQLITE() {
  :
}

DIR_NCURSES="ncurses-5.9"
SRC_NCURSES="$DIR_NCURSES.tar.gz"
URL_NCURSES="http://ftp.gnu.org/pub/gnu/ncurses/$SRC_NCURSES"
CHK_NCURSES="3e042e5f2c7223bffdaac9646a533b8c758b65b5"
SUM_NCURSES="sha1"
BLD_NCURSES() {
  ./configure "--prefix=$INSTALL_DIR" --with-shared
  make
  make install
}
PST_NCURSES() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include/ncurses"
}

DIR_READLINE="readline-6.3"
SRC_READLINE="$DIR_READLINE.tar.gz"
URL_READLINE="ftp://ftp.gnu.org/gnu/readline/$SRC_READLINE"
CHK_READLINE="017b92dc7fd4e636a2b5c9265a77ccc05798c9e1"
SUM_READLINE="sha1"
BLD_READLINE() {
  ./configure "--prefix=$INSTALL_DIR" --with-curses
  make SHLIB_LIBS=-lncurses
  make install
}
PST_READLINE() {
  :
}

# Perl is needed by OpenSSL!
DIR_PERL="perl-5.20.1"
SRC_PERL="$DIR_PERL.tar.gz"
URL_PERL="http://www.cpan.org/src/5.0/$SRC_PERL"
CHK_PERL="fef10210f9e6f4dc2d190be0aee8e1fa2af664630f1d415868d33eebca26d4b5"
SUM_PERL="sha256"
BLD_PERL() {
  ./Configure -de "-Dprefix=$INSTALL_DIR" -Dusenm=n < /dev/null
  make
  make install
}
PST_PERL() {
  :
}

DIR_OPENSSL="openssl-1.0.1j"
SRC_OPENSSL="$DIR_OPENSSL.tar.gz"
URL_OPENSSL="https://www.openssl.org/source/$SRC_OPENSSL"
CHK_OPENSSL="cff86857507624f0ad42d922bb6f77c4f1c2b819"
SUM_OPENSSL="sha1"
BLD_OPENSSL() {
  ./config "--openssldir=$INSTALL_DIR/ssl" shared no-ssl2 no-ssl3
  make depend
  make
  make install
  cp *.pc "$INSTALL_DIR/lib/pkgconfig"
}
PST_OPENSSL() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/ssl/include"
  LDFLAGS="$LDFLAGS -L$INSTALL_DIR/ssl/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/ssl/lib"
}

VER_EXPAT="2.1.0"
DIR_EXPAT="expat-$VER_EXPAT"
SRC_EXPAT="$DIR_EXPAT.tar.gz"
URL_EXPAT="http://downloads.sourceforge.net/project/expat/expat/$VER_EXPAT/$SRC_EXPAT"
CHK_EXPAT="823705472f816df21c8f6aa026dd162b280806838bb55b3432b0fb1fcca7eb86"
SUM_EXPAT="sha256"
BLD_EXPAT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_EXPAT() {
  :
}

VER_PYTHON="2.7.8"
DIR_PYTHON="Python-$VER_PYTHON"
SRC_PYTHON="$DIR_PYTHON.tgz"
URL_PYTHON="http://www.python.org/ftp/python/$VER_PYTHON/$SRC_PYTHON"
CHK_PYTHON="d4bca0159acb0b44a781292b5231936f"
SUM_PYTHON="md5"
BLD_PYTHON() {
  ./configure "--prefix=$INSTALL_DIR" --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi --with-system-expat
  make
  make install
}
PST_PYTHON() {
  :
}

# PCRE for Go (one of the tests complains without it)
DIR_PCRE="pcre-8.36"
SRC_PCRE="$DIR_PCRE.tar.gz"
URL_PCRE="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/$SRC_PCRE"
CHK_PCRE="b37544f33caed0cc502a1e729c3b1d3df5086dcc819b9125c30700c239246c9e"
SUM_PCRE="sha256"
BLD_PCRE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_PCRE() {
  :
}

# Race detector for Go
VER_LLVM_COMPILER_RT="3.5.0"
DIR_LLVM_COMPILER_RT="compiler-rt-$VER_LLVM_COMPILER_RT.src"
SRC_LLVM_COMPILER_RT="$DIR_LLVM_COMPILER_RT.tar.xz"
URL_LLVM_COMPILER_RT="http://llvm.org/releases/$VER_LLVM_COMPILER_RT/$SRC_LLVM_COMPILER_RT"
CHK_LLVM_COMPILER_RT="a4b3e655832bf8d9a357ea2c771db347237460e131988cbb96cda40ff39a8136"
SUM_LLVM_COMPILER_RT="sha256"
BLD_LLVM_COMPILER_RT() {
  cd lib/tsan/go
  # We have bash v2 without '+=':
  sed -i -E 's/([A-Z]+)\+=/\1="$\1"/g' buildgo.sh
  # We have gcc v4.2 which doesn't suport these options:
  sed -i 's/-Wno-maybe-uninitialized//g' buildgo.sh
  sed -i 's/-Wno-unused-const-variable//g' buildgo.sh
  sed -i 's/-Wno-unknown-warning-option//g' buildgo.sh
  sed -i 's/-std=c++11//g' buildgo.sh
  sed -i 's/-ffreestanding/-fno-strict-aliasing -D__libc_malloc=malloc -D__libc_free=free -D__libc_mallinfo=mallinfo -Dnullptr=0/g' buildgo.sh
  ./buildgo.sh
}
PST_LLVM_COMPILER_RT() {
  :
}

DIR_GO="go"
SRC_GO="${DIR_GO}1.3.3.src.tar.gz"
URL_GO="https://storage.googleapis.com/golang/$SRC_GO"
CHK_GO="b54b7deb7b7afe9f5d9a3f5dd830c7dede35393a"
SUM_GO="sha1"
BLD_GO() {
  # uClibC doesn't have futimes
  patch -p0 <<EOF
--- src/lib9/dirfwstat.c.orig
+++ src/lib9/dirfwstat.c
@@ -32,7 +32,26 @@
 #include <sys/stat.h>
 
 #if defined(__FreeBSD__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__linux__)
-/* do nothing -- futimes exists and is fine */
+#define TIMEVAL_TO_TIMESPEC(tv, ts) {                                  \\
+        (ts)->tv_sec = (tv)->tv_sec;                                   \\
+        (ts)->tv_nsec = (tv)->tv_usec * 1000;                          \\
+} 
+static int futimes(const int fd, const struct timeval tvp[2])
+{
+	struct timespec ts[2], *pts = ts;
+
+	if (tvp)
+	{
+		TIMEVAL_TO_TIMESPEC(&tvp[0], &ts[0]); 
+		TIMEVAL_TO_TIMESPEC(&tvp[1], &ts[1]); 
+	}
+	else
+	{
+		pts = 0;
+	}
+
+	return futimens(fd, pts);
+}
 
 #elif defined(__SunOS5_9__)
 /* use futimesat */
EOF

  # Race detector crashes under uClibC so disable for now :(
  patch -p0 <<EOF
--- src/run.bash.orig
+++ src/run.bash
@@ -67,7 +67,7 @@
 # Race detector only supported on Linux and OS X,
 # and only on amd64, and only when cgo is enabled.
 case "\$GOHOSTOS-\$GOOS-\$GOARCH-\$CGO_ENABLED" in
-linux-linux-amd64-1 | darwin-darwin-amd64-1)
+xlinux-linux-amd64-1 | darwin-darwin-amd64-1)
 	echo
 	echo '# Testing race detector.'
 	go test -race -i runtime/race flag
EOF

  # We have gcc v4.2 which doesn't add -lpthread for -pthread:
  patch -p0 <<EOF
--- src/cmd/go/build.go.orig
+++ src/cmd/go/build.go
@@ -1983,6 +1983,7 @@
 	} else {
 		cmd = b.gccCmd(p.Dir)
 	}
+	cmd = append(cmd, "-lpthread")
 	return b.run(p.Dir, p.ImportPath, nil, cmd, "-o", out, obj, flags)
 }
 
EOF

  # Copy race detector we built from source
  cp "$SOURCE_DIR/$DIR_LLVM_COMPILER_RT/lib/tsan/go/race_linux_amd64.syso" src/pkg/runtime/race
  chroot "$CHROOT_DIR" ash <<EOF
  cd "$PWD/src"
  GOROOT_FINAL="$INSTALL_DIR/go" ./all.bash
EOF
  rm -rf "$INSTALL_DIR"/{go,gopath}
  cp -a "$PWD" "$INSTALL_DIR/go"
  mkdir -p "$INSTALL_DIR/gopath"
}
PST_GO() {
  export GOPATH="$INSTALL_DIR/gopath"
  PATH="$PATH:$INSTALL_DIR/go/bin:$GOPATH/bin"
}

DIR_LIBAIO="libaio-0.3.110-1"
SRC_LIBAIO="$DIR_LIBAIO.tar.gz"
URL_LIBAIO="https://git.fedorahosted.org/cgit/libaio.git/snapshot/$SRC_LIBAIO"
CHK_LIBAIO="5c69f43b71d0979b870f49a6cb9e2547ae2344575d8428698ebf5fde13b33529"
SUM_LIBAIO="sha256"
BLD_LIBAIO() {
  make "prefix=$INSTALL_DIR" install
}
PST_LIBAIO() {
  :
}

# Boost is required by thin-provisioning-tools - a heavy requirement!
VER_BOOST="1.57.0"
DIR_BOOST="boost_${VER_BOOST//./_}"
SRC_BOOST="$DIR_BOOST.tar.gz"
URL_BOOST="http://downloads.sourceforge.net/project/boost/boost/$VER_BOOST/$SRC_BOOST"
CHK_BOOST="25f9a8ac28beeb5ab84aa98510305299"
SUM_BOOST="md5"
BLD_BOOST() {
  patch -p0 <<EOF
--- boost/move/algorithm.hpp.orig
+++ boost/move/algorithm.hpp
@@ -241,7 +241,10 @@
    /// @endcond
    )
 {
-   return std::uninitialized_copy(f, l, r);
+  for (; f!=l; ++r, ++f)
+    new (static_cast<void*>(&*r))
+      typename std::iterator_traits<F>::value_type(*f);
+  return r;
 }
 
 //! <b>Effects</b>:
EOF
  cp -a boost "$INSTALL_DIR/include"
}
PST_BOOST() {
  CPPFLAGS="$CPPFLAGS -DBOOST_NO_CXX11_SMART_PTR -DBOOST_NO_CXX11_HDR_ARRAY -DBOOST_LEXICAL_CAST_ASSUME_C_LOCALE -DBOOST_NO_CXX11_ALLOCATOR -D__GLIBC_HAVE_LONG_LONG"
}

VER_THIN_PROVISIONING_TOOLS="0.4.1"
DIR_THIN_PROVISIONING_TOOLS="thin-provisioning-tools-$VER_THIN_PROVISIONING_TOOLS"
SRC_THIN_PROVISIONING_TOOLS="$DIR_THIN_PROVISIONING_TOOLS.tar.gz"
URL_THIN_PROVISIONING_TOOLS="https://github.com/jthornber/thin-provisioning-tools/archive/v$VER_THIN_PROVISIONING_TOOLS.tar.gz"
CHK_THIN_PROVISIONING_TOOLS="59c8a787df8d4828bf9ca1b6310584f2b7723068901e20aa609015ce85df1d46"
SUM_THIN_PROVISIONING_TOOLS="sha256"
BLD_THIN_PROVISIONING_TOOLS() {
  patch -p0 <<EOF
--- caching/superblock.cc.orig
+++ caching/superblock.cc
@@ -268,7 +268,7 @@
 //--------------------------------
 
 // anonymous namespace doesn't work for some reason
-namespace validator {
+namespace _validator {
 	using namespace persistent_data;
 
         uint32_t const VERSION = 1;
@@ -303,7 +303,7 @@
 caching::read_superblock(block_manager<>::ptr bm, block_address location)
 {
 	superblock sb;
-	block_manager<>::read_ref r = bm->read_lock(location, validator::mk_v());
+	block_manager<>::read_ref r = bm->read_lock(location, _validator::mk_v());
 	superblock_disk const *sbd = reinterpret_cast<superblock_disk const *>(r.data());
 	superblock_traits::unpack(*sbd, sb);
 
@@ -313,7 +313,7 @@
 void
 caching::write_superblock(block_manager<>::ptr bm, superblock const &sb, block_address location)
 {
-	block_manager<>::write_ref w = bm->superblock_zero(location, validator::mk_v());
+	block_manager<>::write_ref w = bm->superblock_zero(location, _validator::mk_v());
 	superblock_traits::pack(sb, *reinterpret_cast<superblock_disk *>(w.data()));
 }
 
EOF
  patch -p0 <<EOF
--- persistent-data/space-maps/disk.cc.orig
+++ persistent-data/space-maps/disk.cc
@@ -112,7 +112,7 @@
 			ref_t b1 = test_bit_le(bits, b * 2);
 			ref_t b2 = test_bit_le(bits, b * 2 + 1);
 			ref_t result = b2 ? 1 : 0;
-			result |= b1 ? 0b10 : 0;
+			result |= b1 ? 2 : 0;
 			return result;
 		}
 
@@ -165,7 +165,7 @@
 				ref_t b1 = test_bit_le(bits, b * 2);
 				ref_t b2 = test_bit_le(bits, b * 2 + 1);
 				ref_t result = b2 ? 1 : 0;
-				result |= b1 ? 0b10 : 0;
+				result |= b1 ? 2 : 0;
 				it(offset + b, result);
 			}
 		}
EOF
  patch -p0 <<EOF
--- thin-provisioning/thin_pool.cc.orig
+++ thin-provisioning/thin_pool.cc
@@ -203,7 +203,7 @@
 	return md_->data_sm_->get_nr_free();
 }
 
-sector_t
+::sector_t
 thin_pool::get_data_block_size() const
 {
 	return md_->sb_.data_block_size_;
EOF
  patch -p0 <<EOF
--- thin-provisioning/thin_metadata_size.cc.orig
+++ thin-provisioning/thin_metadata_size.cc
@@ -324,7 +324,7 @@
 static void print_precision(struct global *g, double r, unsigned idx)
 {
 	bool full = g->options.n[NUMERIC] == NO_NUMBER;
-	double rtrunc = truncl(r);
+	double rtrunc = trunc(r);
 
 	if (full)
 		printf("%s - ", g->prg);
EOF
  patch -p0 <<EOF
--- persistent-data/run_set.h.orig
+++ persistent-data/run_set.h
@@ -29,7 +29,7 @@
 
 			if (runs_.size()) {
 				// Skip all blocks that end before r
-				const_iterator it = runs_.lower_bound(r);
+				iterator it = runs_.lower_bound(r);
 				if (it != runs_.begin())
 					--it;
 
@@ -39,7 +39,7 @@
 				// work out which runs overlap
 				if (it != runs_.end()) {
 					r.begin_ = min_maybe(it->begin_, r.begin_);
-					const_iterator first = it;
+					iterator first = it;
 					while (it != runs_.end() && it->begin_ <= r.end_) {
 						r.end_ = max_maybe(it->end_, r.end_);
 						++it;
@@ -83,6 +83,7 @@
 
 		typedef std::set<run<T>, compare_begin> rset;
 		typedef typename rset::const_iterator const_iterator;
+		typedef typename rset::iterator iterator;
 
 		const_iterator begin() const {
 			return runs_.begin();
EOF
  ./configure "--prefix=$INSTALL_DIR"
  CXXFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS -lm" make
  make install
}
PST_THIN_PROVISIONING_TOOLS() {
  :
}

DIR_LVM="LVM2.2.02.111"
SRC_LVM="$DIR_LVM.tgz"
URL_LVM="ftp://sources.redhat.com/pub/lvm2/$SRC_LVM"
CHK_LVM="6d8f3e72fe07f614315d8e0c2d9f93c5fc7a4360d14e4f9b805750e21593dd24"
SUM_LVM="sha256"
BLD_LVM() {
  ac_cv_flag_HAVE_PIE=no LIBS=-lpthread ./configure "--prefix=$INSTALL_DIR" --with-lvm1=none --without-systemdsystemunitdir --disable-udev-systemd-background-jobs --enable-static_link
  sed -ri 's/autoconf\/(install-sh)/\1/g' make.tmpl
  gcc '-D__FBSDID(x)=' -DSIZE_T_MAX=-1 -o autoconf/fmt autoconf/fmt.c
  PATH="$PATH:$PWD/autoconf" make device-mapper
  PATH="$PATH:$PWD/autoconf" make install_device-mapper
  cp -a autoconf/fmt "$INSTALL_DIR/bin"
  cp libdm/libdevmapper.pc "$INSTALL_DIR/lib/pkgconfig"
}
PST_LVM() {
  :
}

VER_UTIL_LINUX="2.25.2"
DIR_UTIL_LINUX="util-linux-$VER_UTIL_LINUX"
SRC_UTIL_LINUX="$DIR_UTIL_LINUX.tar.xz"
URL_UTIL_LINUX="https://www.kernel.org/pub/linux/utils/util-linux/v$(echo "$VER_UTIL_LINUX" | sed -r 's/([0-9]+\.[0-9]+).*/\1/')/$SRC_UTIL_LINUX"
CHK_UTIL_LINUX="e0457f715b73f4a349e1acb08cb410bf0edc9a74a3f75c357070f31f70e33cd6"
SUM_UTIL_LINUX="sha256"
BLD_UTIL_LINUX() {
  patch -p0 <<EOF
--- lib/colors.c.orig
+++ lib/colors.c
@@ -576,10 +576,22 @@
 		if (*p == '\0' || *p == '#')
 			continue;
 
-		rc = sscanf(p,  UL_SCNsA" "	/* name */
-				UL_SCNsA,	/* color */
-				&cn, &seq);
-		if (rc == 2 && cn && seq)
+		size_t len = strlen(p) + 1;
+		cn = malloc(len);
+		if (!cn) {
+			rc = -ENOMEM;
+			goto done;
+		}
+		seq = malloc(len);
+ 		if (!seq) {
+			free(cn);
+			rc = -ENOMEM;
+			goto done;
+		}
+		rc = sscanf(p,  "%s"" "	/* name */
+				"%s",	/* color */
+				cn, seq);
+		if (rc == 2)
 			rc = colors_add_scheme(cc, cn, seq);	/* set rc=0 on success */
 		if (rc) {
 			free(cn);
EOF
  patch -p0 <<EOF
--- lib/loopdev.c.orig
+++ lib/loopdev.c
@@ -1108,7 +1108,7 @@
  */
 static int loopcxt_check_size(struct loopdev_cxt *lc, int file_fd)
 {
-	uint64_t size, expected_size;
+	unsigned long long size, expected_size;
 	int dev_fd;
 	struct stat st;
 
@@ -1158,7 +1158,7 @@
 
 	if (expected_size != size) {
 		DBG(lc, loopdev_debug("warning: loopdev and expected "
-				      "size dismatch (%ju/%ju)",
+				      "size dismatch (%llu/%llu)",
 				      size, expected_size));
 
 		if (loopcxt_set_capacity(lc)) {
@@ -1174,7 +1174,7 @@
 		if (expected_size != size) {
 			errno = ERANGE;
 			DBG(lc, loopdev_debug("failed to set loopdev size, "
-					"size: %ju, expected: %ju",
+					"size: %llu, expected: %llu",
 					size, expected_size));
 			return -errno;
 		}
EOF
  ./configure "--prefix=$INSTALL_DIR" --disable-all-programs --enable-libuuid --enable-libblkid --enable-agetty --without-systemd --without-systemdsystemunitdir
  make
  make install
}
PST_UTIL_LINUX() {
  :
}

DIR_LZO="lzo-2.08"
SRC_LZO="$DIR_LZO.tar.gz"
URL_LZO="http://www.oberhumer.com/opensource/lzo/download/$SRC_LZO"
CHK_LZO="64c3e44843a44ffc4533aa89e41516f42bfefa76"
SUM_LZO="sha1"
BLD_LZO() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LZO() {
  :
}

VER_E2FSPROGS="1.42.12"
DIR_E2FSPROGS="e2fsprogs-$VER_E2FSPROGS"
SRC_E2FSPROGS="$DIR_E2FSPROGS.tar.gz"
URL_E2FSPROGS="http://downloads.sourceforge.net/project/e2fsprogs/e2fsprogs/v$VER_E2FSPROGS/$SRC_E2FSPROGS"
CHK_E2FSPROGS="e17846d91a0edd89fa59b064bde8f8e5cec5851e35f587bcccb4014dbd63186c"
SUM_E2FSPROGS="sha256"
BLD_E2FSPROGS() {
  # uClibC seems to buffer stderr differently to glibc through a pipe
  patch -p0 <<EOF
--- lib/ss/test_script_expected.orig
+++ lib/ss/test_script_expected
@@ -1,5 +1,7 @@
 test_ss 1.0.  Type '?' for a list of commands.
 
+test_ss: Command not found quux
+test_ss: Command not found quux
 test_icount: test
 Hello, world!
 Args: 
@@ -10,9 +12,7 @@
 Hello, world!
 Args: 'bar', 'quux'
 test_icount: quux bar
-test_ss: Command not found quux
 test_icount: quux
-test_ss: Command not found quux
 test_icount: test quux
 Hello, world!
 Args: 'quux'
EOF
  mkdir build
  cd build
  ../configure "--prefix=$INSTALL_DIR" --disable-debugfs --disable-imager --disable-resizer --disable-defrag
  sed -i 's/diff -c/diff -u/g' lib/et/Makefile
  make
  make install
}
PST_E2FSPROGS() {
  :
}

VER_BTRFS_PROGS="3.17"
DIR_BTRFS_PROGS="btrfs-progs-v$VER_BTRFS_PROGS"
SRC_BTRFS_PROGS="btrfs-tools_$VER_BTRFS_PROGS.orig.tar.xz"
URL_BTRFS_PROGS="http://ftp.de.debian.org/debian/pool/main/b/btrfs-tools/$SRC_BTRFS_PROGS"
CHK_BTRFS_PROGS="1abac9ab6c00b551142306431a7f6017"
SUM_BTRFS_PROGS="md5"
BLD_BTRFS_PROGS() {
  patch -p0 <<EOF
--- Makefile.orig
+++ Makefile
@@ -47,7 +47,7 @@
 MAKEOPTS = --no-print-directory Q=\$(Q)
 
 progs = mkfs.btrfs btrfs-debug-tree btrfsck \\
-	btrfs btrfs-map-logical btrfs-image btrfs-zero-log btrfs-convert \\
+	btrfs btrfs-map-logical btrfs-image btrfs-zero-log \\
 	btrfs-find-root btrfstune btrfs-show-super
 
 progs_static = \$(foreach p,\$(progs),\$(p).static)
EOF
  mkdir attr
  cp /usr/include/sys/xattr.h attr
  echo '#define ENOATTR ENODATA' >> attr/xattr.h
  rm -f "$INSTALL_DIR"/lib/libbtrfs.*
  prefix="$INSTALL_DIR" CPATH="$INSTALL_DIR/include:$PWD" DISABLE_BACKTRACE=1 DISABLE_DOCUMENTATION=1 make install
}
PST_BTRFS_PROGS() {
  :
}

VER_CGROUPFS_MOUNT="1.1"
DIR_CGROUPFS_MOUNT="cgroupfs-mount-$VER_CGROUPFS_MOUNT"
SRC_CGROUPFS_MOUNT="$DIR_CGROUPFS_MOUNT.tar.gz"
URL_CGROUPFS_MOUNT="https://github.com/tianon/cgroupfs-mount/archive/$VER_CGROUPFS_MOUNT.tar.gz"
CHK_CGROUPFS_MOUNT="cc32a52f4e1fe707d7475c87ebf8059cb90c29623b79738e2d335e09c1434515"
SUM_CGROUPFS_MOUNT="sha256"
BLD_CGROUPFS_MOUNT() {
  sed -i 's/\/etc\/fstab/\/dev\/null/g' cgroupfs-mount
  cp cgroupfs-* "$INSTALL_DIR/bin"
}
PST_CGROUPFS_MOUNT() {
  :
}

DIR_IPTABLES="iptables-1.4.21"
SRC_IPTABLES="$DIR_IPTABLES.tar.bz2"
URL_IPTABLES="http://www.netfilter.org/projects/iptables/files/$SRC_IPTABLES"
CHK_IPTABLES="536d048c8e8eeebcd9757d0863ebb0c0"
SUM_IPTABLES="md5"
BLD_IPTABLES() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_IPTABLES() {
  :
}

VER_DOCKER="1.3.1"
DIR_DOCKER="docker-$VER_DOCKER"
SRC_DOCKER="$DIR_DOCKER.tar.gz"
URL_DOCKER="https://github.com/docker/docker/archive/v$VER_DOCKER.tar.gz"
CHK_DOCKER="5eb5578945438dce485c2628a3df47a6f6ca8fff7366f1ec8335b37955f82f70"
SUM_DOCKER="sha256"
BLD_DOCKER() {
  # We have bash v2 without '+=', pipefail, BASH_SOURCE and 'declare -A':
  sed -i -E 's/([A-Z]+)\+=/\1="$\1"/g' hack/make.sh
  sed -i 's/set -o pipefail//g' hack/make.sh
  sed -i 's/set -e/\0\
BASH_SOURCE="$0"\
source() {\
  local -a BASH_SOURCE_SAVE=("${BASH_SOURCE[@]}")\
  BASH_SOURCE=("$1" "${BASH_SOURCE[@]}")\
  . "$@"\
  BASH_SOURCE=("${BASH_SOURCE_SAVE[@]}")\
}/g' hack/make.sh
  sed -i -E -e 's/declare -A//g' -e 's/([a-z]+)\+=\(/\1=( "${\1[@]}" /g' contrib/check-config.sh
  patch -p0 << EOF
--- vendor/src/github.com/docker/libcontainer/namespaces/nsenter/nsenter.c.orig
+++ vendor/src/github.com/docker/libcontainer/namespaces/nsenter/nsenter.c
@@ -13,6 +13,7 @@
 #include <sys/types.h>
 #include <unistd.h>
 #include <getopt.h>
+#include <wait.h>
 
 static const kBufSize = 256;
 static const char *kNsEnter = "nsenter";
EOF
  AUTO_GOPATH=1 DOCKER_GITCOMMIT=4e9bbfa CGO_CPPFLAGS="$CPPFLAGS" CGO_LDFLAGS="$LDFLAGS" ./hack/make.sh binary
  rm -f "$INSTALL_DIR/bin/docker"{,-$VER_DOCKER}
  cp -a "bundles/$VER_DOCKER/binary/docker"{,-$VER_DOCKER} "$INSTALL_DIR/bin"
}
PST_DOCKER() {
  :
}

VER_RUNIT="2.1.2"
DIR_RUNIT="admin/runit-$VER_RUNIT"
SRC_RUNIT="runit-$VER_RUNIT.tar.gz"
URL_RUNIT="http://smarden.org/runit/$SRC_RUNIT"
CHK_RUNIT="6fd0160cb0cf1207de4e66754b6d39750cff14bb0aa66ab49490992c0c47ba18"
SUM_RUNIT="sha256"
BLD_RUNIT() {
  sed -i "s/\\/usr\\/local/$(echo "$INSTALL_DIR" | sed 's/\//\\\//g')/g" package/upgrade
  sed -i -r 's/^(here=).*/\1"$PWD"/' package/{compile,upgrade}
  sed -i -r -e 's/^.*(ctmp=)/\1/' -e 's/(cat) -v/\1/' src/check-local
  chroot "$CHROOT_DIR" ash <<EOF
  rm -rf "/package/admin/$(basename "$PWD")"
  mkdir -p /package/admin
  cp -a "$PWD" /package/admin
  cd "/package/admin/$(basename "$PWD")"
  ./package/install
EOF
}
PST_RUNIT() {
  :
}

DIR_ETHTOOL="ethtool-3.16"
SRC_ETHTOOL="$DIR_ETHTOOL.tar.gz"
URL_ETHTOOL="https://www.kernel.org/pub/software/network/ethtool/$SRC_ETHTOOL"
CHK_ETHTOOL="a6f1433824af7b390ed4e66dfc7cee047d6d1f56dbb8ceef9fe905d63aef5275"
SUM_ETHTOOL="sha256"
BLD_ETHTOOL() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_ETHTOOL() {
  :
}

DIR_LIBNFNETLINK="libnfnetlink-1.0.1"
SRC_LIBNFNETLINK="$DIR_LIBNFNETLINK.tar.bz2"
URL_LIBNFNETLINK="http://www.netfilter.org/projects/libnfnetlink/files/$SRC_LIBNFNETLINK"
CHK_LIBNFNETLINK="98927583d2016a9fb1936fed992e2c5e"
SUM_LIBNFNETLINK="md5"
BLD_LIBNFNETLINK() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBNFNETLINK() {
  :
}

DIR_LIBMNL="libmnl-1.0.3"
SRC_LIBMNL="$DIR_LIBMNL.tar.bz2"
URL_LIBMNL="http://www.netfilter.org/projects/libmnl/files/$SRC_LIBMNL"
CHK_LIBMNL="c27e25f67c6422ebf893fc3a844af8085a1c5b63"
SUM_LIBMNL="sha1"
BLD_LIBMNL() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBMNL() {
  :
}

DIR_LIBNETFILTER_CONNTRACK="libnetfilter_conntrack-1.0.4"
SRC_LIBNETFILTER_CONNTRACK="$DIR_LIBNETFILTER_CONNTRACK.tar.bz2"
URL_LIBNETFILTER_CONNTRACK="http://www.netfilter.org/projects/libnetfilter_conntrack/files/$SRC_LIBNETFILTER_CONNTRACK"
CHK_LIBNETFILTER_CONNTRACK="18cf80c4b339a3285e78822dbd4f08d7"
SUM_LIBNETFILTER_CONNTRACK="md5"
BLD_LIBNETFILTER_CONNTRACK() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBNETFILTER_CONNTRACK() {
  :
}

DIR_LIBNETFILTER_CTTIMEOUT="libnetfilter_cttimeout-1.0.0"
SRC_LIBNETFILTER_CTTIMEOUT="$DIR_LIBNETFILTER_CTTIMEOUT.tar.bz2"
URL_LIBNETFILTER_CTTIMEOUT="http://www.netfilter.org/projects/libnetfilter_cttimeout/files/$SRC_LIBNETFILTER_CTTIMEOUT"
CHK_LIBNETFILTER_CTTIMEOUT="7697437fc9ebb6f6b83df56a633db7f9"
SUM_LIBNETFILTER_CTTIMEOUT="md5"
BLD_LIBNETFILTER_CTTIMEOUT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBNETFILTER_CTTIMEOUT() {
  :
}

DIR_LIBNETFILTER_CTHELPER="libnetfilter_cthelper-1.0.0"
SRC_LIBNETFILTER_CTHELPER="$DIR_LIBNETFILTER_CTHELPER.tar.bz2"
URL_LIBNETFILTER_CTHELPER="http://www.netfilter.org/projects/libnetfilter_cthelper/files/$SRC_LIBNETFILTER_CTHELPER"
CHK_LIBNETFILTER_CTHELPER="b2efab1a3a198a5add448960ba011acd"
SUM_LIBNETFILTER_CTHELPER="md5"
BLD_LIBNETFILTER_CTHELPER() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBNETFILTER_CTHELPER() {
  :
}

DIR_LIBNETFILTER_QUEUE="libnetfilter_queue-1.0.2"
SRC_LIBNETFILTER_QUEUE="$DIR_LIBNETFILTER_QUEUE.tar.bz2"
URL_LIBNETFILTER_QUEUE="http://www.netfilter.org/projects/libnetfilter_queue/files/$SRC_LIBNETFILTER_QUEUE"
CHK_LIBNETFILTER_QUEUE="df09befac35cb215865b39a36c96a3fa"
SUM_LIBNETFILTER_QUEUE="md5"
BLD_LIBNETFILTER_QUEUE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBNETFILTER_QUEUE() {
  :
}

DIR_REFLEX="reflex-20131209"
SRC_REFLEX="$DIR_REFLEX.tar.gz"
URL_REFLEX="http://invisible-island.net/datafiles/release/reflex.tar.gz"
CHK_REFLEX="0ebbfa2d564e1e211ccf862ad6f12dbffa784164ea4492d08b9d50a592aaf0e2"
SUM_REFLEX="sha256"
BLD_REFLEX() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
  ( cd "$INSTALL_DIR/bin"; ln -s reflex flex )
}
PST_REFLEX() {
  :
}

DIR_BYACC="byacc-20141006"
SRC_BYACC="$DIR_BYACC.tar.gz"
URL_BYACC="http://invisible-island.net/datafiles/release/byacc.tar.gz"
CHK_BYACC="391b0ac550e94920a86960c6973ec539784dc84849e7c2bb1645ae6d8178b14d"
SUM_BYACC="sha256"
BLD_BYACC() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
  ( cd "$INSTALL_DIR/bin"; ln -s yacc byacc )
}
PST_BYACC() {
  :
}

DIR_CONNTRACK_TOOLS="conntrack-tools-1.4.2"
SRC_CONNTRACK_TOOLS="$DIR_CONNTRACK_TOOLS.tar.bz2"
URL_CONNTRACK_TOOLS="http://www.netfilter.org/projects/conntrack-tools/files/$SRC_CONNTRACK_TOOLS"
CHK_CONNTRACK_TOOLS="50b89305bb689973d42a163c480dc77a5c0f6fe0"
SUM_CONNTRACK_TOOLS="sha1"
BLD_CONNTRACK_TOOLS() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_CONNTRACK_TOOLS() {
  :
}

VER_WEAVE="6d1792ebdfe4b6d60841d8d9b6d73834a2206182"

DIR_WEAVE_DEPS="weave-deps-$VER_WEAVE"
SRC_WEAVE_DEPS="$DIR_WEAVE_DEPS.tar.gz"
GET_WEAVE_DEPS() {
  wget "https://raw.githubusercontent.com/zettio/weave/$VER_WEAVE/weaver/main.go"
  mkdir "$DIR_WEAVE_DEPS"
  GOPATH="$DIR_WEAVE_DEPS" go get -d -tags netgo .
  tar -zc "$DIR_WEAVE_DEPS"
}
BLD_WEAVE_DEPS() {
  cp -a * "$GOPATH"
}
PST_WEAVE_DEPS() {
  :
}

DIR_WEAVE="weave-$VER_WEAVE"
SRC_WEAVE="$DIR_WEAVE.tar.gz"
URL_WEAVE="https://github.com/zettio/weave/archive/$VER_WEAVE.tar.gz"
CHK_WEAVE="e319277036273ec641dc42c1d086576789fafb0c43725bab52e7f46e89baf4b6"
SUM_WEAVE="sha256"
BLD_WEAVE() {
  WEAVE_DIR="$GOPATH/src/github.com/zettio/weave"
  rm -rf "$WEAVE_DIR"
  mkdir -p "$(dirname "$WEAVE_DIR")"
  cp -a "$PWD" "$WEAVE_DIR"
  cd "$WEAVE_DIR"
}
PST_WEAVE() {
  :
}

PACKAGES=(LIBICONV
          PKGCONFIG
          LIBFFI
          BDB
          GDBM
          BZIP2
          ZLIB
          SQLITE
          NCURSES
          READLINE
          PERL
          OPENSSL
          EXPAT
          PYTHON
          PCRE
          LLVM_COMPILER_RT
          GO
          LIBAIO
          BOOST
          THIN_PROVISIONING_TOOLS
          LVM
          UTIL_LINUX
          LZO
          E2FSPROGS
          BTRFS_PROGS
          CGROUPFS_MOUNT
          IPTABLES
          DOCKER
          RUNIT
          ETHTOOL
          LIBNFNETLINK
          LIBMNL
          LIBNETFILTER_CONNTRACK
          LIBNETFILTER_CTTIMEOUT
          LIBNETFILTER_CTHELPER
          LIBNETFILTER_QUEUE
          REFLEX
          BYACC
          CONNTRACK_TOOLS
          WEAVE_DEPS
          WEAVE)
