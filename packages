DIR_LIBICONV="libiconv-1.14"
SRC_LIBICONV="$DIR_LIBICONV.tar.gz"
URL_LIBICONV="http://ftp.gnu.org/pub/gnu/libiconv/$SRC_LIBICONV"
CHK_LIBICONV="be7d67e50d72ff067b2c0291311bc283add36965"
SUM_LIBICONV="sha1"
BLD_LIBICONV() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_LIBICONV() {
  :
}

DIR_PKGCONFIG="pkg-config-0.28"
SRC_PKGCONFIG="$DIR_PKGCONFIG.tar.gz"
URL_PKGCONFIG="http://pkgconfig.freedesktop.org/releases/$SRC_PKGCONFIG"
CHK_PKGCONFIG="71853779b12f958777bffcb8ca6d849b4d3bed46"
SUM_PKGCONFIG="sha1"
BLD_PKGCONFIG() {
  ./configure "--prefix=$INSTALL_DIR" --with-internal-glib
  make
  make install
}
PST_PKGCONFIG() {
  :
}

DIR_LIBFFI="libffi-3.1"
SRC_LIBFFI="$DIR_LIBFFI.tar.gz"
URL_LIBFFI="ftp://sourceware.org/pub/libffi/$SRC_LIBFFI"
CHK_LIBFFI="f5898b29bbfd70502831a212d9249d10"
SUM_LIBFFI="md5"
BLD_LIBFFI() {
  ./configure "--prefix=$INSTALL_DIR"
  sed -i 's/tail -1/tail -n 1/g' Makefile
  make
  make install
}
PST_LIBFFI() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/lib/$DIR_LIBFFI/include"
  LDFLAGS="$LDFLAGS -L$INSTALL_DIR/lib64"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/lib64"
}

DIR_BDB="db-4.8.30"
SRC_BDB="$DIR_BDB.tar.gz"
URL_BDB="http://download.oracle.com/berkeley-db/$SRC_BDB"
CHK_BDB="ab36c170dda5b2ceaad3915ced96e41c6b7e493c"
SUM_BDB="sha1"
BLD_BDB() {
  cd build_unix
  ../dist/configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_BDB() {
  :
}

DIR_GDBM="gdbm-1.11"
SRC_GDBM="$DIR_GDBM.tar.gz"
URL_GDBM="ftp://ftp.gnu.org/gnu/gdbm/$SRC_GDBM"
CHK_GDBM="72c832680cf0999caedbe5b265c8c1bd"
SUM_GDBM="md5"
BLD_GDBM() {
  ./configure "--prefix=$INSTALL_DIR" --enable-libgdbm-compat
  make
  make install
}
PST_GDBM() {
  :
}

DIR_BZIP2="bzip2-1.0.6"
SRC_BZIP2="$DIR_BZIP2.tar.gz"
URL_BZIP2="http://www.bzip.org/1.0.6/$SRC_BZIP2"
CHK_BZIP2="00b516f4704d4a7cb50a1d97e6e8e15b"
SUM_BZIP2="md5"
BLD_BZIP2() {
  make -f Makefile-libbz2_so
  make
  make install "PREFIX=$INSTALL_DIR"
  cp -a libbz2.so* "$INSTALL_DIR/lib"
  ( cd "$INSTALL_DIR/lib"; ln -s libbz2.so.1.0 libbz2.so )
}
PST_BZIP2() {
  :
}

DIR_ZLIB="zlib-1.2.8"
SRC_ZLIB="$DIR_ZLIB.tar.gz"
URL_ZLIB="http://zlib.net/$SRC_ZLIB"
CHK_ZLIB="44d667c142d7cda120332623eab69f40"
SUM_ZLIB="md5"
BLD_ZLIB() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_ZLIB() {
  :
}

DIR_SQLITE="sqlite-autoconf-3080701"
SRC_SQLITE="$DIR_SQLITE.tar.gz"
URL_SQLITE="http://www.sqlite.org/2014/$SRC_SQLITE"
CHK_SQLITE="5601be1263842209d7c5dbf6128f1cc0b6bbe2e5"
SUM_SQLITE="sha1"
BLD_SQLITE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_SQLITE() {
  :
}

DIR_NCURSES="ncurses-5.9"
SRC_NCURSES="$DIR_NCURSES.tar.gz"
URL_NCURSES="http://ftp.gnu.org/pub/gnu/ncurses/$SRC_NCURSES"
CHK_NCURSES="3e042e5f2c7223bffdaac9646a533b8c758b65b5"
SUM_NCURSES="sha1"
BLD_NCURSES() {
  ./configure "--prefix=$INSTALL_DIR" --with-shared
  make
  make install
}
PST_NCURSES() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include/ncurses"
}

DIR_READLINE="readline-6.3"
SRC_READLINE="$DIR_READLINE.tar.gz"
URL_READLINE="ftp://ftp.gnu.org/gnu/readline/$SRC_READLINE"
CHK_READLINE="017b92dc7fd4e636a2b5c9265a77ccc05798c9e1"
SUM_READLINE="sha1"
BLD_READLINE() {
  ./configure "--prefix=$INSTALL_DIR" --with-curses
  make SHLIB_LIBS=-lncurses
  make install
}
PST_READLINE() {
  :
}

# Perl is needed by OpenSSL!
DIR_PERL="perl-5.20.1"
SRC_PERL="$DIR_PERL.tar.gz"
URL_PERL="http://www.cpan.org/src/5.0/$SRC_PERL"
CHK_PERL="fef10210f9e6f4dc2d190be0aee8e1fa2af664630f1d415868d33eebca26d4b5"
SUM_PERL="sha256"
BLD_PERL() {
  ./Configure -de "-Dprefix=$INSTALL_DIR" -Dusenm=n < /dev/null
  make
  make install
}
PST_PERL() {
  :
}

DIR_OPENSSL="openssl-1.0.1j"
SRC_OPENSSL="$DIR_OPENSSL.tar.gz"
URL_OPENSSL="https://www.openssl.org/source/$SRC_OPENSSL"
CHK_OPENSSL="cff86857507624f0ad42d922bb6f77c4f1c2b819"
SUM_OPENSSL="sha1"
BLD_OPENSSL() {
  ./config "--openssldir=$INSTALL_DIR/ssl" shared no-ssl2 no-ssl3
  make depend
  make
  make install
}
PST_OPENSSL() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/ssl/include"
  LDFLAGS="$LDFLAGS -L$INSTALL_DIR/ssl/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/ssl/lib"
}

VER_PYTHON="2.7.8"
DIR_PYTHON="Python-$VER_PYTHON"
SRC_PYTHON="$DIR_PYTHON.tgz"
URL_PYTHON="http://www.python.org/ftp/python/$VER_PYTHON/$SRC_PYTHON"
CHK_PYTHON="d4bca0159acb0b44a781292b5231936f"
SUM_PYTHON="md5"
BLD_PYTHON() {
  ./configure "--prefix=$INSTALL_DIR" --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi
  make
  make install
}
PST_PYTHON() {
  :
}

# PCRE for Go (one of the tests complains without it)
DIR_PCRE="pcre-8.36"
SRC_PCRE="$DIR_PCRE.tar.gz"
URL_PCRE="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/$SRC_PCRE"
CHK_PCRE="b37544f33caed0cc502a1e729c3b1d3df5086dcc819b9125c30700c239246c9e"
SUM_PCRE="sha256"
BLD_PCRE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
PST_PCRE() {
  :
}

# Race detector for Go
VER_LLVM_COMPILER_RT="3.5.0"
DIR_LLVM_COMPILER_RT="compiler-rt-$VER_LLVM_COMPILER_RT.src"
SRC_LLVM_COMPILER_RT="$DIR_LLVM_COMPILER_RT.tar.xz"
URL_LLVM_COMPILER_RT="http://llvm.org/releases/$VER_LLVM_COMPILER_RT/$SRC_LLVM_COMPILER_RT"
CHK_LLVM_COMPILER_RT="a4b3e655832bf8d9a357ea2c771db347237460e131988cbb96cda40ff39a8136"
SUM_LLVM_COMPILER_RT="sha256"
BLD_LLVM_COMPILER_RT() {
  cd lib/tsan/go
  # We have an old version of bash without '+='.
  # Remove when we get a new version.
  sed -i -E 's/([A-Z]+)\+=/\1="$\1"/g' buildgo.sh
  # We have an old version of gcc which doesn't suport these options.
  # Remove when we get a new one.
  sed -i 's/-Wno-maybe-uninitialized//g' buildgo.sh
  sed -i 's/-Wno-unused-const-variable//g' buildgo.sh
  sed -i 's/-Wno-unknown-warning-option//g' buildgo.sh
  sed -i 's/-std=c++11//g' buildgo.sh
  sed -i 's/-ffreestanding/-fno-strict-aliasing -D__libc_malloc=malloc -D__libc_free=free -D__libc_mallinfo=mallinfo -Dnullptr=0/g' buildgo.sh
  ./buildgo.sh
}
PST_LLVM_COMPILER_RT() {
  :
}

DIR_GO="go"
SRC_GO="${DIR_GO}1.3.3.src.tar.gz"
URL_GO="https://storage.googleapis.com/golang/$SRC_GO"
CHK_GO="b54b7deb7b7afe9f5d9a3f5dd830c7dede35393a"
SUM_GO="sha1"
BLD_GO() {
  # uClibC doesn't have futimes
  patch -p0 <<EOF
--- src/lib9/dirfwstat.c.orig
+++ src/lib9/dirfwstat.c
@@ -32,7 +32,26 @@
 #include <sys/stat.h>
 
 #if defined(__FreeBSD__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__linux__)
-/* do nothing -- futimes exists and is fine */
+#define TIMEVAL_TO_TIMESPEC(tv, ts) {                                  \\
+        (ts)->tv_sec = (tv)->tv_sec;                                   \\
+        (ts)->tv_nsec = (tv)->tv_usec * 1000;                          \\
+} 
+static int futimes(const int fd, const struct timeval tvp[2])
+{
+	struct timespec ts[2], *pts = ts;
+
+	if (tvp)
+	{
+		TIMEVAL_TO_TIMESPEC(&tvp[0], &ts[0]); 
+		TIMEVAL_TO_TIMESPEC(&tvp[1], &ts[1]); 
+	}
+	else
+	{
+		pts = 0;
+	}
+
+	return futimens(fd, pts);
+}
 
 #elif defined(__SunOS5_9__)
 /* use futimesat */
EOF

  # Race detector crashes under uClibC so disable for now :(
  patch -p0 <<EOF
--- src/run.bash.orig
+++ src/run.bash
@@ -67,7 +67,7 @@
 # Race detector only supported on Linux and OS X,
 # and only on amd64, and only when cgo is enabled.
 case "\$GOHOSTOS-\$GOOS-\$GOARCH-\$CGO_ENABLED" in
-linux-linux-amd64-1 | darwin-darwin-amd64-1)
+xlinux-linux-amd64-1 | darwin-darwin-amd64-1)
 	echo
 	echo '# Testing race detector.'
 	go test -race -i runtime/race flag
EOF

  # We have an old version of gcc which doesn't add -lpthread for -pthread
  # Remove when we get a new version.
  patch -p0 <<EOF
--- src/cmd/go/build.go.orig
+++ src/cmd/go/build.go
@@ -1983,6 +1983,7 @@
 	} else {
 		cmd = b.gccCmd(p.Dir)
 	}
+	cmd = append(cmd, "-lpthread")
 	return b.run(p.Dir, p.ImportPath, nil, cmd, "-o", out, obj, flags)
 }
 
EOF

  # Copy race detector we built from source
  cp "$SOURCE_DIR/$DIR_LLVM_COMPILER_RT/lib/tsan/go/race_linux_amd64.syso" src/pkg/runtime/race
  chroot "$CHROOT_DIR" ash <<EOF
  cd "$PWD/src"
  GOROOT_FINAL="$INSTALL_DIR/go" ./all.bash
EOF
  rm -rf "$INSTALL_DIR/go"
  cp -a "$PWD" "$INSTALL_DIR/go"
}
PST_GO() {
  PATH="$PATH:$INSTALL_DIR/go/bin"
}

PACKAGES=(LIBICONV
          PKGCONFIG
          LIBFFI
          BDB
          GDBM
          BZIP2
          ZLIB
          SQLITE
          NCURSES
          READLINE
          PERL
          OPENSSL
          PYTHON
          PCRE
          LLVM_COMPILER_RT
          GO)
