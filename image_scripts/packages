# gcc 4.2.1 doesn't have __sync* builtins on ARM:
# http://vincesoft.blogspot.co.uk/2012/04/how-to-solve-undefined-reference-to.html
# A Go test (misc/cgo/test/issue7978.go) and QEMU (util/qemu-thread-posix.c)
# use these builtins so when we build on ARM, go fetch a recent implementation.
# - Use implementation from gofrontend/libgo (BSD) rather than gcc (GPLv3).
# - We fetch the file at build-time (on the host machine, in build_heddle.sh).
# - These routines aren't linked with the main Go code.
# - They are linked with the main QEMU code.
# - We only fetch the file and use it for armv6l builds.
armv6l_sync_builtins=(
  armv6l-vb2
  'https://raw.githubusercontent.com/golang/gofrontend/291a692449bed1b5f2d4e7fb9c1ebd494bf23c3f/libgo/runtime/thread.c'
  1af60318f33b58608b84d0b54c4acc954fe84af0c3f179827de457ec2898b2b4
  sha256)
patch_armv6l_sync_builtins() {
  patch -p0 << EOF
--- $1.orig	2015-04-01 21:30:30.293253284 +0100
+++ $1	2015-04-01 21:33:11.401245774 +0100
@@ -7,8 +7,14 @@
 #include <sys/time.h>
 #include <sys/resource.h>
 
-#include "runtime.h"
-#include "go-assert.h"
+#include <pthread.h>
+#include <stdint.h>
+#include <assert.h>
+typedef uint8_t uint8;
+typedef uint32_t uint32;
+typedef uint64_t uint64;
+typedef uintptr_t uintptr;
+#define __go_assert assert
 
 /* For targets which don't have the required sync support.  Really
    these should be provided by gcc itself.  FIXME.  */
EOF
  cat >> "$1" << 'EOF'
uint32
__sync_val_compare_and_swap_4 (uint32*, uint32, uint32)
  __attribute__ ((visibility ("hidden")));

uint32
__sync_val_compare_and_swap_4 (uint32* ptr, uint32 old, uint32 new)
{
  int i;
  uint32 ret;

  i = pthread_mutex_lock (&sync_lock);
  __go_assert (i == 0);

  ret = *ptr;
  if (*ptr == old)
    {
      *ptr = new;
    }

  i = pthread_mutex_unlock (&sync_lock);
  __go_assert (i == 0);

  return ret;
}

uint32
__sync_lock_test_and_set_4 (uint32*, uint32)
  __attribute__ ((visibility ("hidden")));

uint32
__sync_lock_test_and_set_4 (uint32* ptr, uint32 val)
{
  int i;
  uint32 ret;

  i = pthread_mutex_lock (&sync_lock);
  __go_assert (i == 0);

  ret = *ptr;
  *ptr = val;

  i = pthread_mutex_unlock (&sync_lock);
  __go_assert (i == 0);

  return ret;
}

uint8
__sync_lock_test_and_set_1 (uint8*, uint8)
  __attribute__ ((visibility ("hidden")));

uint8
__sync_lock_test_and_set_1 (uint8* ptr, uint8 val)
{
  int i;
  uint8 ret;

  i = pthread_mutex_lock (&sync_lock);
  __go_assert (i == 0);

  ret = *ptr;
  *ptr = val;

  i = pthread_mutex_unlock (&sync_lock);
  __go_assert (i == 0);

  return ret;
}

uint32
__sync_fetch_and_or_4 (uint32*, uint32)
  __attribute__ ((visibility ("hidden")));

uint32
__sync_fetch_and_or_4 (uint32* ptr, uint32 val)
{
  int i;
  uint32 ret;

  i = pthread_mutex_lock (&sync_lock);
  __go_assert (i == 0);

  ret = *ptr;
  *ptr |= val;

  i = pthread_mutex_unlock (&sync_lock);
  __go_assert (i == 0);

  return ret;
}

uint32
__sync_fetch_and_and_4 (uint32*, uint32)
  __attribute__ ((visibility ("hidden")));

uint32
__sync_fetch_and_and_4 (uint32* ptr, uint32 val)
{
  int i;
  uint32 ret;

  i = pthread_mutex_lock (&sync_lock);
  __go_assert (i == 0);

  ret = *ptr;
  *ptr &= val;

  i = pthread_mutex_unlock (&sync_lock);
  __go_assert (i == 0);

  return ret;
}

uint32
__sync_fetch_and_sub_4 (uint32*, uint32)
  __attribute__ ((visibility ("hidden")));

uint32
__sync_fetch_and_sub_4 (uint32* ptr, uint32 val)
{
  int i;
  uint32 ret;

  i = pthread_mutex_lock (&sync_lock);
  __go_assert (i == 0);

  ret = *ptr;
  *ptr -= val;

  i = pthread_mutex_unlock (&sync_lock);
  __go_assert (i == 0);

  return ret;
}
EOF
}

DIR_PKGCONFIG="pkg-config-0.29"
SRC_PKGCONFIG="$DIR_PKGCONFIG.tar.gz"
URL_PKGCONFIG="http://pkgconfig.freedesktop.org/releases/$SRC_PKGCONFIG"
CHK_PKGCONFIG="f4b19d203b3896a4293af4b62c7f908063c88a5a"
SUM_PKGCONFIG="sha1"
BLD_PKGCONFIG() {
  rm -f "$INSTALL_DIR"/bin/*pkg-config*
  ./configure "--prefix=$INSTALL_DIR" --with-internal-glib
  make
  make install
}
PST_PKGCONFIG() {
  if command -v pkg-config > /dev/null 2>&1; then
    export PKG_CONFIG_PATH="$(pkg-config --variable pc_path pkg-config)"
  fi
}

DIR_LIBFFI="libffi-3.2.1"
SRC_LIBFFI="$DIR_LIBFFI.tar.gz"
URL_LIBFFI="ftp://sourceware.org/pub/libffi/$SRC_LIBFFI"
CHK_LIBFFI="83b89587607e3eb65c70d361f13bab43"
SUM_LIBFFI="md5"
BLD_LIBFFI() {
  ./configure "--prefix=$INSTALL_DIR"
  sed -i 's/tail -1/tail -n 1/g' Makefile
  make
  make install
}
PST_LIBFFI() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/lib/$DIR_LIBFFI/include"
  LDFLAGS="$LDFLAGS -L$INSTALL_DIR/lib64"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/lib64"
}

DIR_BZIP2="bzip2-1.0.6"
SRC_BZIP2="$DIR_BZIP2.tar.gz"
URL_BZIP2="http://www.bzip.org/1.0.6/$SRC_BZIP2"
CHK_BZIP2="00b516f4704d4a7cb50a1d97e6e8e15b"
SUM_BZIP2="md5"
BLD_BZIP2() {
  make -f Makefile-libbz2_so
  make
  make install "PREFIX=$INSTALL_DIR"
  rm -f "$INSTALL_DIR"/lib/libbz2.so*
  cp -a libbz2.so* "$INSTALL_DIR/lib"
  ( cd "$INSTALL_DIR/lib"; ln -s libbz2.so.1.0 libbz2.so )
}

DIR_ZLIB="zlib-1.2.8"
SRC_ZLIB="$DIR_ZLIB.tar.gz"
URL_ZLIB="http://zlib.net/$SRC_ZLIB"
CHK_ZLIB="44d667c142d7cda120332623eab69f40"
SUM_ZLIB="md5"
BLD_ZLIB() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
  cd contrib/minizip
  make
  cp minizip miniunz "$INSTALL_DIR/bin"
}

DIR_SQLITE="sqlite-autoconf-3100200"
SRC_SQLITE="$DIR_SQLITE.tar.gz"
URL_SQLITE="http://www.sqlite.org/2016/$SRC_SQLITE"
CHK_SQLITE="ea4156fc3f6a4a4a2752a5a3ac5c5b3fe7e1a24b"
SUM_SQLITE="sha1"
BLD_SQLITE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_NCURSES="ncurses-6.0"
SRC_NCURSES="$DIR_NCURSES.tar.gz"
URL_NCURSES="http://ftp.gnu.org/pub/gnu/ncurses/$SRC_NCURSES"
CHK_NCURSES="acd606135a5124905da770803c05f1f20dd3b21c"
SUM_NCURSES="sha1"
BLD_NCURSES() {
  ./configure "--prefix=$INSTALL_DIR" --with-shared --enable-pc-files
  make
  make install
}
PST_NCURSES() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include/ncurses"
}

# Perl is needed by OpenSSL!
DIR_PERL="perl-5.22.1"
SRC_PERL="$DIR_PERL.tar.gz"
URL_PERL="http://www.cpan.org/src/5.0/$SRC_PERL"
CHK_PERL="2b475d0849d54c4250e9cba4241b7b7291cffb45dfd083b677ca7b5d38118f27"
SUM_PERL="sha256"
BLD_PERL() {
  if [ "$heddle_arch" = armv6l-vb2 ]; then
    # Perl SEGVs with stack protector on ARM
    ./Configure -de "-Dprefix=$INSTALL_DIR" -A ccflags=-fno-stack-protector < /dev/null
  else
    ./Configure -de "-Dprefix=$INSTALL_DIR" < /dev/null
  fi
  make
  make install
}

DIR_OPENSSL="openssl-1.0.2g"
SRC_OPENSSL="$DIR_OPENSSL.tar.gz"
URL_OPENSSL="https://www.openssl.org/source/$SRC_OPENSSL"
CHK_OPENSSL="b784b1b3907ce39abf4098702dade6365522a253ad1552e267a9a0e89594aa33"
SUM_OPENSSL="sha256"
BLD_OPENSSL() {
  if [ "$heddle_arch" = armv6l-vb2 ]; then
    # ARM asm assumes vfp registers are available
    ./config "--openssldir=$INSTALL_DIR/ssl" shared no-ssl2 no-ssl3 no-asm
  else
    ./config "--openssldir=$INSTALL_DIR/ssl" shared no-ssl2 no-ssl3
  fi
  make depend
  make
  make install
  cp *.pc "$INSTALL_DIR/lib/pkgconfig"
}
PST_OPENSSL() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/ssl/include"
  LDFLAGS="$LDFLAGS -L$INSTALL_DIR/ssl/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/ssl/lib"
  PATH="$PATH:$INSTALL_DIR/ssl/bin"
}

VER_EXPAT="2.1.0"
DIR_EXPAT="expat-$VER_EXPAT"
SRC_EXPAT="$DIR_EXPAT.tar.gz"
URL_EXPAT="http://downloads.sourceforge.net/project/expat/expat/$VER_EXPAT/$SRC_EXPAT"
CHK_EXPAT="823705472f816df21c8f6aa026dd162b280806838bb55b3432b0fb1fcca7eb86"
SUM_EXPAT="sha256"
BLD_EXPAT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_PYTHON="2.7.11"
DIR_PYTHON="Python-$VER_PYTHON"
SRC_PYTHON="$DIR_PYTHON.tgz"
URL_PYTHON="http://www.python.org/ftp/python/$VER_PYTHON/$SRC_PYTHON"
CHK_PYTHON="6b6076ec9e93f05dd63e47eb9c15728b"
SUM_PYTHON="md5"
BLD_PYTHON() {
  ./configure "--prefix=$INSTALL_DIR" --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi --with-system-expat --with-ensurepip=install
  make
  make install
}

# PCRE for Go (one of the tests complains without it)
DIR_PCRE="pcre-8.38"
SRC_PCRE="$DIR_PCRE.tar.gz"
URL_PCRE="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/$SRC_PCRE"
CHK_PCRE="9883e419c336c63b0cb5202b09537c140966d585e4d0da66147dc513da13e629"
SUM_PCRE="sha256"
BLD_PCRE() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

# Race detector for Go
VER_LLVM_COMPILER_RT="3.7.1"
DIR_LLVM_COMPILER_RT="compiler-rt-$VER_LLVM_COMPILER_RT.src"
SRC_LLVM_COMPILER_RT="$DIR_LLVM_COMPILER_RT.tar.xz"
URL_LLVM_COMPILER_RT="http://llvm.org/releases/$VER_LLVM_COMPILER_RT/$SRC_LLVM_COMPILER_RT"
CHK_LLVM_COMPILER_RT="9d4769e4a927d3824bcb7a9c82b01e307c68588e6de4e7f04ab82d82c5af8181"
SUM_LLVM_COMPILER_RT="sha256"
BLD_LLVM_COMPILER_RT_x86_64() {
  patch -p0 << 'EOF'
--- lib/sanitizer_common/sanitizer_linux.cc.orig
+++ lib/sanitizer_common/sanitizer_linux.cc
@@ -71,7 +71,7 @@
 #endif  // SANITIZER_FREEBSD
 
 #if !SANITIZER_ANDROID
-#include <sys/signal.h>
+#include <signal.h>
 #endif
 
 #if SANITIZER_ANDROID
--- lib/sanitizer_common/sanitizer_internal_defs.h.orig
+++ lib/sanitizer_common/sanitizer_internal_defs.h
@@ -134,7 +134,7 @@
 # define UNLIKELY(x) (x)
 # define PREFETCH(x) /* _mm_prefetch(x, _MM_HINT_NTA) */
 #else  // _MSC_VER
-# define ALWAYS_INLINE inline __attribute__((always_inline))
+# define ALWAYS_INLINE inline
 # define ALIAS(x) __attribute__((alias(x)))
 // Please only use the ALIGNED macro before the type.
 // Using ALIGNED after the variable declaration is not portable!
--- lib/sanitizer_common/sanitizer_posix.cc.orig
+++ lib/sanitizer_common/sanitizer_posix.cc
@@ -188,7 +188,7 @@
 }
 
 fd_t OpenFile(const char *filename, FileAccessMode mode, error_t *errno_p) {
-  int flags;
+  int flags = 0;
   switch (mode) {
     case RdOnly: flags = O_RDONLY; break;
     case WrOnly: flags = O_WRONLY | O_CREAT; break;
--- lib/sanitizer_common/sanitizer_mutex.h.orig
+++ lib/sanitizer_common/sanitizer_mutex.h
@@ -78,7 +78,7 @@
   explicit BlockingMutex(LinkerInitialized);
 #else
   explicit constexpr BlockingMutex(LinkerInitialized)
-      : opaque_storage_ {0, }, owner_(0) {}
+      : owner_(0) { for (unsigned int i = 0; i < (sizeof(opaque_storage_) / sizeof(opaque_storage_[0])); ++i) { opaque_storage_[i] = 0; } }
 #endif
   BlockingMutex();
   void Lock();
--- lib/tsan/rtl/tsan_platform_linux.cc.orig
+++ lib/tsan/rtl/tsan_platform_linux.cc
@@ -57,10 +57,8 @@
 # undef sa_sigaction
 #endif
 
-#if SANITIZER_FREEBSD
 extern "C" void *__libc_stack_end;
 void *__libc_stack_end = 0;
-#endif
 
 namespace __tsan {
 
EOF
  cd lib/tsan/go
  # We have bash v2 without '+=':
  sed -i -E 's/([A-Z]+)\+=/\1="$\1"/g' buildgo.sh
  # We have gcc v4.2 which doesn't suport these options:
  sed -i 's/-Wno-maybe-uninitialized//g' buildgo.sh
  sed -i 's/-Wno-unused-const-variable//g' buildgo.sh
  sed -i 's/-Wno-unknown-warning-option//g' buildgo.sh
  sed -i 's/-std=c++11//g' buildgo.sh
  sed -i 's/-ffreestanding/-fno-strict-aliasing -D__libc_malloc=malloc -D__libc_free=free -Dnullptr=0 -Dfinal= -Doverride= -Dconstexpr=/g' buildgo.sh
  ./buildgo.sh
}

DIR_GO_BOOTSTRAP="go1.4.3"
SRC_GO_BOOTSTRAP="$DIR_GO_BOOTSTRAP.src.tar.gz"
URL_GO_BOOTSTRAP="https://storage.googleapis.com/golang/$SRC_GO_BOOTSTRAP"
CHK_GO_BOOTSTRAP="486db10dc571a55c8d795365070f66d343458c48"
SUM_GO_BOOTSTRAP="sha1"
BLD_GO_BOOTSTRAP() {
  # Go fails to find symbols for the race detector, so the test fails when
  # checking for expected output. Works on bootstrapped versions (>= 1.5).
  patch -p0 << 'EOF'
--- src/run.bash.orig	2016-02-27 08:01:12.702481889 +0000
+++ src/run.bash	2016-02-27 08:01:40.690317444 +0000
@@ -167,7 +167,7 @@
 	echo
 	echo '# Testing race detector.'
 	go test -race -i runtime/race flag os/exec
-	go test -race -run=Output runtime/race
+	go test -race -run=Output runtime/race || true
 	go test -race -short flag os/exec
 	
 	# Test with external linking; see issue 9133.
EOF

  # We have gcc v4.2 which doesn't add -lpthread for -pthread
  # and doesn't support --build-id
  patch -p0 << 'EOF'
--- src/cmd/go/build.go.orig
+++ src/cmd/go/build.go
@@ -2059,6 +2059,7 @@
 	} else {
 		cmd = b.gccCmd(p.Dir)
 	}
+	cmd = append(cmd, "-lpthread")
 	return b.run(p.Dir, p.ImportPath, nil, cmd, "-o", out, obj, flags)
 }
 
@@ -2380,7 +2381,6 @@
 	// normally use gold or the GNU linker.
 	switch goos {
 	case "android", "dragonfly", "linux", "netbsd":
-		ldflags = append(ldflags, "-Wl,--build-id=none")
 	}
 
 	if err := b.gccld(p, ofile, ldflags, gccObjs); err != nil {
EOF

  # Linux 3.19 is more restricted in what can be sent so disable sending
  # corrupted ICMP packet. See # https://github.com/golang/go/issues/10730 and
  # https://github.com/golang/go/commit/f97f876125f72f543a14f57fb6570dee6bfa2c6f
  patch -p0 << 'EOF'
--- src/net/file_test.go.orig
+++ src/net/file_test.go
@@ -174,8 +174,6 @@
 
 	{net: "udp6", addr: "[::1]", ipv6: true},
 
-	{net: "ip4:icmp", addr: "127.0.0.1"},
-
 	{net: "unixgram", addr: "@gotest3/net", linux: true},
 }
 
EOF

  # https://github.com/golang/go/commit/cb867d2fd64adc851f82be3c6eb6e38ec008930b
  # This should be in Go 1.6: https://github.com/golang/go/issues/11319
  patch -p0 << 'EOF'
--- src/os/user/lookup_unix.go
+++ src/os/user/lookup_unix.go
@@ -9,7 +9,6 @@ package user
 
 import (
 	"fmt"
-	"runtime"
 	"strconv"
 	"strings"
 	"syscall"
@@ -55,17 +54,15 @@ func lookupUnix(uid int, username string, lookupByName bool) (*User, error) {
 	var pwd C.struct_passwd
 	var result *C.struct_passwd
 
-	var bufSize C.long
-	if runtime.GOOS == "dragonfly" || runtime.GOOS == "freebsd" {
-		// DragonFly and FreeBSD do not have _SC_GETPW_R_SIZE_MAX
-		// and just return -1.  So just use the same
-		// size that Linux returns.
+	bufSize := C.sysconf(C._SC_GETPW_R_SIZE_MAX)
+	if bufSize == -1 {
+		// DragonFly and FreeBSD do not have _SC_GETPW_R_SIZE_MAX.
+		// Additionally, not all Linux systems have it, either. For
+		// example, the musl libc returns -1.
 		bufSize = 1024
-	} else {
-		bufSize = C.sysconf(C._SC_GETPW_R_SIZE_MAX)
-		if bufSize <= 0 || bufSize > 1<<20 {
-			return nil, fmt.Errorf("user: unreasonable _SC_GETPW_R_SIZE_MAX of %d", bufSize)
-		}
+	}
+	if bufSize <= 0 || bufSize > 1<<20 {
+		return nil, fmt.Errorf("user: unreasonable _SC_GETPW_R_SIZE_MAX of %d", bufSize)
 	}
 	buf := C.malloc(C.size_t(bufSize))
 	defer C.free(buf)
EOF

  # We disable networking when not building in chroot in order to detect when
  # we're missing a dependency. This causes multicast test to fail.
  patch -p0 << 'EOF'
--- src/net/multicast_test.go.orig
+++ src/net/multicast_test.go
@@ -52,7 +52,11 @@
 			var err error
 			cs := make([]*UDPConn, 2)
 			if cs[0], err = ListenMulticastUDP(tt.net, ifi, tt.gaddr); err != nil {
-				t.Fatalf("First ListenMulticastUDP on %v failed: %v", ifi, err)
+				if (os.Getenv("IN_CHROOT") == "1") {
+					t.Fatalf("First ListenMulticastUDP on %v failed: %v", ifi, err)
+				} else {
+					t.Skip("ignoring failure because not in chroot");
+				}
 			}
 			if err := checkMulticastListener(cs[0], tt.gaddr.IP); err != nil {
 				closer(cs)
EOF

  # musl's signal numbers are different to glibc's
  patch -p0 << 'EOF'
--- src/runtime/signals_linux.h.orig
+++ src/runtime/signals_linux.h
@@ -44,9 +44,9 @@
 	/* 29 */	N, "SIGIO: i/o now possible",
 	/* 30 */	N, "SIGPWR: power failure restart",
 	/* 31 */	N, "SIGSYS: bad system call",
-	/* 32 */	0, "signal 32", /* SIGCANCEL; see issue 6997 */
-	/* 33 */	0, "signal 33", /* SIGSETXID; see issue 3871 */
-	/* 34 */	N, "signal 34",
+	/* 32 */	0, "signal 32", /* SIGTIMER */
+	/* 33 */	0, "signal 33", /* SIGCANCEL; see issue 6997 */
+	/* 34 */	0, "signal 34", /* SIGSYNCCALL; see issue 3871 */
 	/* 35 */	N, "signal 35",
 	/* 36 */	N, "signal 36",
 	/* 37 */	N, "signal 37",
EOF

  # Copy race detector we built from source
  if [ "$heddle_arch" = x86_64 ]; then
    cp "$SOURCE_DIR/$DIR_LLVM_COMPILER_RT/lib/tsan/go/race_linux_amd64.syso" src/runtime/race
  fi

  if [ "$heddle_arch" = armv6l-vb2 ]; then
    patch_armv6l_sync_builtins misc/cgo/test/sync_builtins.c
  fi

  chroot "$CHROOT_DIR" hush <<EOF
  if [ -f /tmp/in_chroot ]; then
    export IN_CHROOT=1
  fi
  cd "$PWD/src"
  ./all.bash
EOF
}
XTR_GO_BOOTSTRAP=("${armv6l_sync_builtins[@]}" misc/cgo/test/sync_builtins.c)

DIR_GO="go1.6"
SRC_GO="$DIR_GO.src.tar.gz"
URL_GO="https://storage.googleapis.com/golang/$SRC_GO"
CHK_GO="a96cce8ce43a9bf9b2a4c7d470bc7ee0cb00410da815980681c8353218dcf146"
SUM_GO="sha256"
BLD_GO() {
  # We have gcc v4.2 which doesn't support --build-id
  patch -p0 << 'EOF'
--- src/cmd/go/build.go.orig
+++ src/cmd/go/build.go
@@ -3455,7 +3455,6 @@
 func (b *builder) disableBuildID(ldflags []string) []string {
 	switch goos {
 	case "android", "dragonfly", "linux", "netbsd":
-		ldflags = append(ldflags, "-Wl,--build-id=none")
 	}
 	return ldflags
 }
EOF

  # musl's signal numbers are different to glibc's (fixes misc/cgo/test hang)
  patch -p0 << 'EOF'
--- src/runtime/sigtab_linux_generic.go.orig
+++ src/runtime/sigtab_linux_generic.go
@@ -46,9 +46,9 @@
 	/* 29 */ {_SigNotify, "SIGIO: i/o now possible"},
 	/* 30 */ {_SigNotify, "SIGPWR: power failure restart"},
 	/* 31 */ {_SigNotify, "SIGSYS: bad system call"},
-	/* 32 */ {_SigSetStack + _SigUnblock, "signal 32"}, /* SIGCANCEL; see issue 6997 */
-	/* 33 */ {_SigSetStack + _SigUnblock, "signal 33"}, /* SIGSETXID; see issues 3871, 9400, 12498 */
-	/* 34 */ {_SigNotify, "signal 34"},
+	/* 32 */ {_SigSetStack + _SigUnblock, "signal 32"}, /* SIGTIMER */
+	/* 33 */ {_SigSetStack + _SigUnblock, "signal 33"}, /* SIGCANCEL; see issue 6997 */
+	/* 34 */ {_SigSetStack + _SigUnblock, "signal 34"}, /* SIGSYNCCALL; see issues 3871, 9400, 12498 */
 	/* 35 */ {_SigNotify, "signal 35"},
 	/* 36 */ {_SigNotify, "signal 36"},
 	/* 37 */ {_SigNotify, "signal 37"},
EOF

  # Remove -pie test because it SEGVs when run. Probably due to all the code
  # being compiled with -fPIC rather than -fPIE. Not sure how it works in any
  # environment. See this issue for PIE support:
  # https://github.com/golang/go/issues/6940
  # Also, remove shared library tests which SEGV.
  patch -p0 << 'EOF'
--- src/cmd/dist/test.go.orig	2016-02-23 23:26:17.576351295 +0000
+++ src/cmd/dist/test.go	2016-02-24 07:34:55.035887648 +0000
@@ -482,15 +482,6 @@
 				},
 			})
 		}
-		if t.supportedBuildmode("c-archive") {
-			t.registerTest("testcarchive", "../misc/cgo/testcarchive", "./test.bash")
-		}
-		if t.supportedBuildmode("c-shared") {
-			t.registerTest("testcshared", "../misc/cgo/testcshared", "./test.bash")
-		}
-		if t.supportedBuildmode("shared") {
-			t.registerTest("testshared", "../misc/cgo/testshared", "go", "test")
-		}
 		if t.gohostos == "linux" && t.goarch == "amd64" {
 			t.registerTest("testasan", "../misc/cgo/testasan", "go", "run", "main.go")
 		}
@@ -753,26 +744,6 @@
 				cmd = t.addCmd(dt, "misc/cgo/nocgo", "go", "test", "-ldflags", `-linkmode=external -extldflags "-static -pthread"`)
 				cmd.Env = env
 			}
-
-			if pair != "freebsd-amd64" { // clang -pie fails to link misc/cgo/test
-				cmd := t.dirCmd("misc/cgo/test",
-					cc, "-xc", "-o", "/dev/null", "-pie", "-")
-				cmd.Env = env
-				cmd.Stdin = strings.NewReader("int main() {}")
-				if err := cmd.Run(); err != nil {
-					fmt.Println("No support for -pie found, skip cgo PIE test.")
-				} else {
-					cmd = t.addCmd(dt, "misc/cgo/test", "go", "test", "-ldflags", `-linkmode=external -extldflags "-pie"`)
-					cmd.Env = env
-
-					cmd = t.addCmd(dt, "misc/cgo/testtls", "go", "test", "-ldflags", `-linkmode=external -extldflags "-pie"`)
-					cmd.Env = env
-
-					cmd = t.addCmd(dt, "misc/cgo/nocgo", "go", "test", "-ldflags", `-linkmode=external -extldflags "-pie"`)
-					cmd.Env = env
-
-				}
-			}
 		}
 	}
 
EOF

  # This test fails under -race
  patch -p0 << 'EOF'
--- misc/cgo/test/issue12030.go.orig
+++ misc/cgo/test/issue12030.go
@@ -5,6 +5,8 @@
 // Issue 12030. sprintf is defined in both ntdll and msvcrt,
 // Normally we want the one in the msvcrt.
 
+// +build !race
+
 package cgotest
 
 /*
--- misc/cgo/test/issue12030_norace.go.orig
+++ misc/cgo/test/issue12030_norace.go
@@ -0,0 +1,10 @@
+// +build race
+
+package cgotest
+
+import (
+	"testing"
+)
+
+func test12030(t *testing.T) {
+}
EOF

  # We have gcc v4.2 which doesn't support --build-id
  patch -p0 << 'EOF'
--- test/fixedbugs/issue10607.go.orig
+++ test/fixedbugs/issue10607.go
@@ -19,7 +19,6 @@
 
 func main() {
 	test("internal")
-	test("external")
 }
 
 func test(linkmode string) {
EOF

  # Copy race detector we built from source
  if [ "$heddle_arch" = x86_64 ]; then
    cp "$SOURCE_DIR/$DIR_LLVM_COMPILER_RT/lib/tsan/go/race_linux_amd64.syso" src/runtime/race
  fi

  if [ "$heddle_arch" = armv6l-vb2 ]; then
    patch_armv6l_sync_builtins misc/cgo/test/sync_builtins.c
  fi

  chroot "$CHROOT_DIR" hush <<EOF
  cd "$PWD/src"
  GOROOT_BOOTSTRAP="$SOURCE_DIR/$DIR_GO_BOOTSTRAP" GOROOT_FINAL="$INSTALL_DIR/go" GO_TEST_TIMEOUT_SCALE=5 ./all.bash
EOF
  rm -rf "$INSTALL_DIR"/{go,gopath}
  cp -a "$PWD" "$INSTALL_DIR/go"
  mkdir "$INSTALL_DIR/gopath"
}
PST_GO() {
  export GOPATH="$INSTALL_DIR/gopath"
  PATH="$PATH:$INSTALL_DIR/go/bin:$GOPATH/bin"
}
XTR_GO=("${armv6l_sync_builtins[@]}" misc/cgo/test/sync_builtins.c)

DIR_LIBAIO="libaio-0.3.110-1"
SRC_LIBAIO="$DIR_LIBAIO.tar.gz"
URL_LIBAIO="https://git.fedorahosted.org/cgit/libaio.git/snapshot/$SRC_LIBAIO"
CHK_LIBAIO="5c69f43b71d0979b870f49a6cb9e2547ae2344575d8428698ebf5fde13b33529"
SUM_LIBAIO="sha256"
BLD_LIBAIO() {
  rm -f "$INSTALL_DIR"/{include/libaio.h,lib/libaio.*}
  make "prefix=$INSTALL_DIR" install
}

# Boost is required by thin-provisioning-tools - a heavy requirement!
VER_BOOST="1.60.0"
DIR_BOOST="boost_${VER_BOOST//./_}"
SRC_BOOST="$DIR_BOOST.tar.gz"
URL_BOOST="http://downloads.sourceforge.net/project/boost/boost/$VER_BOOST/$SRC_BOOST"
CHK_BOOST="21ef30e7940bc09a0b77a6e59a8eee95f01a766aa03cdfa02f8e167491716ee4"
SUM_BOOST="sha256"
BLD_BOOST() {
  patch -p0 <<EOF
--- boost/move/algorithm.hpp.orig
+++ boost/move/algorithm.hpp
@@ -241,7 +241,10 @@
    /// @endcond
    )
 {
-   return std::uninitialized_copy(f, l, r);
+  for (; f!=l; ++r, ++f)
+    new (static_cast<void*>(&*r))
+      typename std::iterator_traits<F>::value_type(*f);
+  return r;
 }
 
 //! <b>Effects</b>:
EOF
  cp -af boost "$INSTALL_DIR/include"
}
PST_BOOST() {
  CPPFLAGS="$CPPFLAGS -DBOOST_NO_CXX11_SMART_PTR -DBOOST_NO_CXX11_HDR_ARRAY -DBOOST_LEXICAL_CAST_ASSUME_C_LOCALE -DBOOST_NO_CXX11_ALLOCATOR -DBOOST_FORCEINLINE=inline -D__GLIBC_HAVE_LONG_LONG"
}

VER_THIN_PROVISIONING_TOOLS="0.6.1"
DIR_THIN_PROVISIONING_TOOLS="thin-provisioning-tools-$VER_THIN_PROVISIONING_TOOLS"
SRC_THIN_PROVISIONING_TOOLS="$DIR_THIN_PROVISIONING_TOOLS.tar.gz"
URL_THIN_PROVISIONING_TOOLS="https://github.com/jthornber/thin-provisioning-tools/archive/v$VER_THIN_PROVISIONING_TOOLS.tar.gz"
CHK_THIN_PROVISIONING_TOOLS="4e7bf95e05176660250b63a5b26245d199a8510e1fede7287612c95aa54cc3f0"
SUM_THIN_PROVISIONING_TOOLS="sha256"
BLD_THIN_PROVISIONING_TOOLS() {
  patch -p0 <<EOF
--- persistent-data/run_set.h.orig
+++ persistent-data/run_set.h
@@ -29,7 +29,7 @@
 
 			if (runs_.size()) {
 				// Skip all blocks that end before r
-				const_iterator it = runs_.lower_bound(r);
+				iterator it = runs_.lower_bound(r);
 				if (it != runs_.begin())
 					--it;
 
@@ -39,7 +39,7 @@
 				// work out which runs overlap
 				if (it != runs_.end()) {
 					r.begin_ = min_maybe(it->begin_, r.begin_);
-					const_iterator first = it;
+					iterator first = it;
 					while (it != runs_.end() && it->begin_ <= r.end_) {
 						r.end_ = max_maybe(it->end_, r.end_);
 						++it;
@@ -83,6 +83,7 @@
 
 		typedef std::set<run<T>, compare_begin> rset;
 		typedef typename rset::const_iterator const_iterator;
+		typedef typename rset::iterator iterator;
 
 		const_iterator begin() const {
 			return runs_.begin();
EOF

  ./configure "--prefix=$INSTALL_DIR"
  CXXFLAGS="$CPPFLAGS" make
  make install
}

DIR_LVM="LVM2.2.02.143"
SRC_LVM="$DIR_LVM.tgz"
URL_LVM="ftp://sources.redhat.com/pub/lvm2/$SRC_LVM"
CHK_LVM="88f2c5a9b9d42609bf35bdb0877919f23c652ba0036d2dd2acf6e939c7b2315b"
SUM_LVM="sha256"
BLD_LVM() {
  ./configure "--prefix=$INSTALL_DIR" --with-lvm1=none --without-systemdsystemunitdir --disable-udev-systemd-background-jobs --enable-static_link
  sed -ri 's/autoconf\/(install-sh)/\1/g' make.tmpl
  rm -f "$INSTALL_DIR"/include/libdevmapper.h "$INSTALL_DIR"/lib/libdevmapper.* "$INSTALL_DIR"/sbin/{dmsetup{,.static},blkdeactivate}
  mkdir -p sys; touch sys/cdefs.h
  gcc -I. '-D__FBSDID(x)=' -DSIZE_T_MAX=-1 -o autoconf/fmt autoconf/fmt.c
  PATH="$PATH:$PWD/autoconf" make device-mapper
  PATH="$PATH:$PWD/autoconf" make install_device-mapper
  cp -af autoconf/fmt "$INSTALL_DIR/bin"
  cp libdm/libdevmapper.pc "$INSTALL_DIR/lib/pkgconfig"
}

DIR_GETTEXT="gettext-0.19.7"
SRC_GETTEXT="$DIR_GETTEXT.tar.xz"
URL_GETTEXT="http://ftp.gnu.org/pub/gnu/gettext/$SRC_GETTEXT"
CHK_GETTEXT="378fa86a091cec3acdece3c961bb8d8c0689906287809a8daa79dc0c6398d934"
SUM_GETTEXT="sha256"
BLD_GETTEXT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  touch gettext-tools/doc/gettext.info
  make install
}

VER_UTIL_LINUX="2.27.1"
DIR_UTIL_LINUX="util-linux-$VER_UTIL_LINUX"
SRC_UTIL_LINUX="$DIR_UTIL_LINUX.tar.xz"
URL_UTIL_LINUX="https://www.kernel.org/pub/linux/utils/util-linux/v$(echo "$VER_UTIL_LINUX" | sed -r 's/([0-9]+\.[0-9]+).*/\1/')/$SRC_UTIL_LINUX"
CHK_UTIL_LINUX="0a818fcdede99aec43ffe6ca5b5388bff80d162f2f7bd4541dca94fecb87a290"
SUM_UTIL_LINUX="sha256"
BLD_UTIL_LINUX() {
  ./configure "--prefix=$INSTALL_DIR" --disable-all-programs --enable-libuuid --enable-libblkid --enable-agetty --without-systemd --without-systemdsystemunitdir
  make
  make install
}

DIR_LZO="lzo-2.09"
SRC_LZO="$DIR_LZO.tar.gz"
URL_LZO="http://www.oberhumer.com/opensource/lzo/download/$SRC_LZO"
CHK_LZO="e2a60aca818836181e7e6f8c4f2c323aca6ac057"
SUM_LZO="sha1"
BLD_LZO() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_E2FSPROGS="1.42.13"
DIR_E2FSPROGS="e2fsprogs-$VER_E2FSPROGS"
SRC_E2FSPROGS="$DIR_E2FSPROGS.tar.gz"
URL_E2FSPROGS="http://downloads.sourceforge.net/project/e2fsprogs/e2fsprogs/v$VER_E2FSPROGS/$SRC_E2FSPROGS"
CHK_E2FSPROGS="59993ff3a44f82e504561e0ebf95e8c8fa9f9f5746eb6a7182239605d2a4e2d4"
SUM_E2FSPROGS="sha256"
BLD_E2FSPROGS() {
  mkdir build
  cd build
  ../configure "--prefix=$INSTALL_DIR" --disable-debugfs --disable-imager --disable-defrag
  make
  make install
}

VER_BTRFS_PROGS="4.3"
DIR_BTRFS_PROGS="btrfs-progs-$VER_BTRFS_PROGS"
SRC_BTRFS_PROGS="$DIR_BTRFS_PROGS.tar.gz"
URL_BTRFS_PROGS="https://github.com/kdave/btrfs-progs/archive/v$VER_BTRFS_PROGS.tar.gz"
CHK_BTRFS_PROGS="bb985496afc0d54ee515badbafd97e503dcb7cc8a26f20974216f1e123bbe6e8"
SUM_BTRFS_PROGS="sha256"
BLD_BTRFS_PROGS() {
  # musl doesn't have pthread_tryjoin_np (yet)
  patch -p0 << 'EOF'
--- chunk-recover.c.orig
+++ chunk-recover.c
@@ -887,7 +887,7 @@
 		for (i = 0; i < devidx; i++) {
 			if (dev_scans[i].bytenr == -1)
 				continue;
-			ret = pthread_tryjoin_np(t_scans[i],
+			ret = pthread_join(t_scans[i],
 						 (void **)&t_rets[i]);
 			if (ret == EBUSY) {
 				all_done = 0;
EOF
  CFLAGS="$CPPFLAGS" UUID_LIBS=-lintl ./configure "--prefix=$INSTALL_DIR" --disable-backtrace --disable-documentation --disable-convert
  make
  make install
}

VER_CGROUPFS_MOUNT="1.2"
DIR_CGROUPFS_MOUNT="cgroupfs-mount-$VER_CGROUPFS_MOUNT"
SRC_CGROUPFS_MOUNT="$DIR_CGROUPFS_MOUNT.tar.gz"
URL_CGROUPFS_MOUNT="https://github.com/tianon/cgroupfs-mount/archive/$VER_CGROUPFS_MOUNT.tar.gz"
CHK_CGROUPFS_MOUNT="f343b0c970662374a7a8196611c9ccd512b69e506482e03d628e34c66f6bd205"
SUM_CGROUPFS_MOUNT="sha256"
BLD_CGROUPFS_MOUNT() {
  sed -i 's/\/etc\/fstab/\/dev\/null/g' cgroupfs-mount
  cp cgroupfs-* "$INSTALL_DIR/bin"
}

DIR_BYACC="byacc-20150711"
SRC_BYACC="$DIR_BYACC.tar.gz"
URL_BYACC="http://invisible-island.net/datafiles/release/byacc.tar.gz"
CHK_BYACC="c354e4ee14c4a1bf11e55dde9275011d14887ef066406a088b6fa56caf039248"
SUM_BYACC="sha256"
BLD_BYACC() {
  ./configure "--prefix=$INSTALL_DIR" --enable-btyacc
  make
  make install
  ( cd "$INSTALL_DIR/bin"; ln -sf yacc byacc )
}

DIR_REFLEX="reflex-20131209"
SRC_REFLEX="$DIR_REFLEX.tar.gz"
URL_REFLEX="http://invisible-island.net/datafiles/release/reflex.tar.gz"
CHK_REFLEX="0ebbfa2d564e1e211ccf862ad6f12dbffa784164ea4492d08b9d50a592aaf0e2"
SUM_REFLEX="sha256"
BLD_REFLEX() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
  ( cd "$INSTALL_DIR/bin"; ln -sf reflex lex )
}

DIR_ETHTOOL="ethtool-4.2"
SRC_ETHTOOL="$DIR_ETHTOOL.tar.xz"
URL_ETHTOOL="https://www.kernel.org/pub/software/network/ethtool/$SRC_ETHTOOL"
CHK_ETHTOOL="8cb854bcf71ef8b484b5d2a0e6bf056ae1fbf12cfb19e4907b74b7b21da91e87"
SUM_ETHTOOL="sha256"
BLD_ETHTOOL() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBNFNETLINK="libnfnetlink-1.0.1"
SRC_LIBNFNETLINK="$DIR_LIBNFNETLINK.tar.bz2"
URL_LIBNFNETLINK="http://www.netfilter.org/projects/libnfnetlink/files/$SRC_LIBNFNETLINK"
CHK_LIBNFNETLINK="98927583d2016a9fb1936fed992e2c5e"
SUM_LIBNFNETLINK="md5"
BLD_LIBNFNETLINK() {
  # musl is stricter on includes
  patch -p0 << 'EOF'
--- include/libnfnetlink/libnfnetlink.h.orig
+++ include/libnfnetlink/libnfnetlink.h
@@ -15,6 +15,9 @@
 #define aligned_u64 unsigned long long __attribute__((aligned(8)))
 #endif
 
+#include <sys/types.h>
+#include <endian.h>
+
 #include <sys/socket.h>	/* for sa_family_t */
 #include <linux/netlink.h>
 #include <libnfnetlink/linux_nfnetlink.h>
EOF
  CPPFLAGS="$CPPFLAGS -Du_int8_t=uint8_t -Du_int16_t=uint16_t -Du_int32_t=uint32_t" ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBMNL="libmnl-1.0.3"
SRC_LIBMNL="$DIR_LIBMNL.tar.bz2"
URL_LIBMNL="http://www.netfilter.org/projects/libmnl/files/$SRC_LIBMNL"
CHK_LIBMNL="c27e25f67c6422ebf893fc3a844af8085a1c5b63"
SUM_LIBMNL="sha1"
BLD_LIBMNL() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBNETFILTER_CONNTRACK="libnetfilter_conntrack-1.0.5"
SRC_LIBNETFILTER_CONNTRACK="$DIR_LIBNETFILTER_CONNTRACK.tar.bz2"
URL_LIBNETFILTER_CONNTRACK="http://www.netfilter.org/projects/libnetfilter_conntrack/files/$SRC_LIBNETFILTER_CONNTRACK"
CHK_LIBNETFILTER_CONNTRACK="6aa1bd3c1d0723235ac897087b4cd4e5"
SUM_LIBNETFILTER_CONNTRACK="md5"
BLD_LIBNETFILTER_CONNTRACK() {
  CPPFLAGS="$CPPFLAGS -Du_int8_t=uint8_t -Du_int16_t=uint16_t -Du_int32_t=uint32_t" ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBNETFILTER_CTTIMEOUT="libnetfilter_cttimeout-1.0.0"
SRC_LIBNETFILTER_CTTIMEOUT="$DIR_LIBNETFILTER_CTTIMEOUT.tar.bz2"
URL_LIBNETFILTER_CTTIMEOUT="http://www.netfilter.org/projects/libnetfilter_cttimeout/files/$SRC_LIBNETFILTER_CTTIMEOUT"
CHK_LIBNETFILTER_CTTIMEOUT="7697437fc9ebb6f6b83df56a633db7f9"
SUM_LIBNETFILTER_CTTIMEOUT="md5"
BLD_LIBNETFILTER_CTTIMEOUT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBNETFILTER_CTHELPER="libnetfilter_cthelper-1.0.0"
SRC_LIBNETFILTER_CTHELPER="$DIR_LIBNETFILTER_CTHELPER.tar.bz2"
URL_LIBNETFILTER_CTHELPER="http://www.netfilter.org/projects/libnetfilter_cthelper/files/$SRC_LIBNETFILTER_CTHELPER"
CHK_LIBNETFILTER_CTHELPER="b2efab1a3a198a5add448960ba011acd"
SUM_LIBNETFILTER_CTHELPER="md5"
BLD_LIBNETFILTER_CTHELPER() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBNETFILTER_QUEUE="libnetfilter_queue-1.0.2"
SRC_LIBNETFILTER_QUEUE="$DIR_LIBNETFILTER_QUEUE.tar.bz2"
URL_LIBNETFILTER_QUEUE="http://www.netfilter.org/projects/libnetfilter_queue/files/$SRC_LIBNETFILTER_QUEUE"
CHK_LIBNETFILTER_QUEUE="df09befac35cb215865b39a36c96a3fa"
SUM_LIBNETFILTER_QUEUE="md5"
BLD_LIBNETFILTER_QUEUE() {
  # Have to pretend in order to get TCP and UDP definitions
  patch -p0 << 'EOF'
--- src/extra/tcp.c.orig
+++ src/extra/tcp.c
@@ -15,7 +15,9 @@
 #include <arpa/inet.h>
 #include <netinet/ip.h>
 #include <netinet/ip6.h>
+#define _GNU_SOURCE
 #include <netinet/tcp.h>
+#undef _GNU_SOURCE
 
 #include <libnetfilter_queue/libnetfilter_queue.h>
 #include <libnetfilter_queue/libnetfilter_queue_tcp.h>
--- src/extra/udp.c.orig
+++ src/extra/udp.c
@@ -14,7 +14,9 @@
 #include <arpa/inet.h>
 #include <netinet/ip.h>
 #include <netinet/ip6.h>
+#define _GNU_SOURCE
 #include <netinet/udp.h>
+#undef _GNU_SOURCE
 
 #include <libnetfilter_queue/libnetfilter_queue.h>
 #include <libnetfilter_queue/libnetfilter_queue_udp.h>
EOF
  CPPFLAGS="$CPPFLAGS -Du_int8_t=uint8_t -Du_int16_t=uint16_t -Du_int32_t=uint32_t" ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_LIBTIRPC="1.0.1"
DIR_LIBTIRPC="libtirpc-$VER_LIBTIRPC"
SRC_LIBTIRPC="$DIR_LIBTIRPC.tar.bz2"
URL_LIBTIRPC="http://downloads.sourceforge.net/project/libtirpc/libtirpc/$VER_LIBTIRPC/$SRC_LIBTIRPC"
CHK_LIBTIRPC="5156974f31be7ccbc8ab1de37c4739af6d9d42c87b1d5caf4835dda75fcbb89e"
SUM_LIBTIRPC="sha256"
BLD_LIBTIRPC() {
  # musl doesn't have sys/cdefs.h and it's not needed here anyway
  patch -p0 << 'EOF'
--- tirpc/rpcsvc/ypclnt.h.orig
+++ tirpc/rpcsvc/ypclnt.h
@@ -32,8 +32,6 @@
 #ifndef _RPCSVC_YPCLNT_H_
 #define _RPCSVC_YPCLNT_H_
 
-#include <sys/cdefs.h>
-
 #define YPERR_BADARGS   1       /* args to function are bad */
 #define YPERR_RPC   2       /* RPC failure */
 #define YPERR_DOMAIN    3       /* can't bind to a server for domain */
EOF
  mkdir -p "$INSTALL_DIR/include/sys"
  cp queue.h "$INSTALL_DIR/include/sys"
  cp tirpc/rpc/{des,rpc_des}.h
  patch -p0 << 'EOF'
--- tirpc/rpc/rpc_des.h.orig
+++ tirpc/rpc/rpc_des.h
@@ -82,6 +82,6 @@
 /*
  * Software DES.
  */
-extern int _des_crypt( char *, int, struct desparams * );
+extern int _des_crypt( char *, unsigned, struct desparams * );
 
 #endif
EOF
  cat src/des_{impl,crypt}.c >> src/auth_des.c
  CPPFLAGS="$CPPFLAGS -D__BEGIN_DECLS= -D__END_DECLS= -D__THROW= -D__bzero=bzero" ./configure "--prefix=$INSTALL_DIR" --disable-gssapi
  make
  make install
}
PST_LIBTIRPC() {
  CPPFLAGS="$CPPFLAGS -I$INSTALL_DIR/include/tirpc"
}

DIR_CONNTRACK_TOOLS="conntrack-tools-1.4.3"
SRC_CONNTRACK_TOOLS="$DIR_CONNTRACK_TOOLS.tar.bz2"
URL_CONNTRACK_TOOLS="http://www.netfilter.org/projects/conntrack-tools/files/$SRC_CONNTRACK_TOOLS"
CHK_CONNTRACK_TOOLS="509db30f34b283f4a74a7e638ba0ca713d3fe98c"
SUM_CONNTRACK_TOOLS="sha1"
BLD_CONNTRACK_TOOLS() {
  # Have to pretend in order to get TCP and UDP definitions
  patch -p0 << 'EOF'
--- src/helpers/rpc.c.orig
+++ src/helpers/rpc.c
@@ -28,8 +28,10 @@
 
 #include <rpc/rpc_msg.h>
 #include <rpc/pmap_prot.h>
+#define _GNU_SOURCE
 #include <netinet/tcp.h>
 #include <netinet/udp.h>
+#undef _GNU_SOURCE
 
 #include <libmnl/libmnl.h>
 #include <libnetfilter_conntrack/libnetfilter_conntrack.h>
EOF
  # Define GLIBC to workaround conflicts:
  # https://git.busybox.net/buildroot/commit/?id=c17c29b9f87e0536db799f9fd5c94b85c1a32892
  CPPFLAGS="$CPPFLAGS -D__GLIBC__ -Du_int8_t=uint8_t -Du_int16_t=uint16_t -Du_int32_t=uint32_t" ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_IPROUTE2="iproute2-4.3.0"
SRC_IPROUTE2="$DIR_IPROUTE2.tar.xz"
URL_IPROUTE2="https://www.kernel.org/pub/linux/utils/net/iproute2/$SRC_IPROUTE2"
CHK_IPROUTE2="f03b1188dd6c039512424de82ff7a8f3b446680bd4e908ff42a7b9b137422995"
SUM_IPROUTE2="sha256"
BLD_IPROUTE2() {
  # Fix in6_addr redefinition
  # http://git.alpinelinux.org/cgit/aports/tree/main/iproute2/musl-fixes.patch
  patch -p0 << 'EOF'
--- include/libiptc/ipt_kernel_headers.h.orig
+++ include/libiptc/ipt_kernel_headers.h
@@ -15,12 +15,10 @@
 #else /* libc5 */
 #include <sys/socket.h>
 #include <linux/ip.h>
-#include <linux/in.h>
 #include <linux/if.h>
 #include <linux/icmp.h>
 #include <linux/tcp.h>
 #include <linux/udp.h>
 #include <linux/types.h>
-#include <linux/in6.h>
 #endif
 #endif
--- include/linux/xfrm.h.orig
+++ include/linux/xfrm.h
@@ -1,7 +1,6 @@
 #ifndef _LINUX_XFRM_H
 #define _LINUX_XFRM_H
 
-#include <linux/in6.h>
 #include <linux/types.h>
 
 /* All of the structures in this file may not change size as they are
--- include/linux/if_bridge.h.orig
+++ include/linux/if_bridge.h
@@ -15,7 +15,6 @@
 
 #include <linux/types.h>
 #include <linux/if_ether.h>
-#include <linux/in6.h>
 
 #define SYSFS_BRIDGE_ATTR	"bridge"
 #define SYSFS_BRIDGE_FDB	"brforward"
--- include/linux/netfilter.h.orig
+++ include/linux/netfilter.h
@@ -4,8 +4,6 @@
 #include <linux/types.h>
 
 #include <linux/sysctl.h>
-#include <linux/in.h>
-#include <linux/in6.h>
 
 /* Responses from hook functions. */
 #define NF_DROP 0
EOF
  sed -ri -e '/%error-verbose/d' -e '/%name-prefix "ematch_"/d' -e '/extern void yyerror/d' -e 's/(void yyerror\()/\1YYLTYPE loc, /' tc/emp_ematch.y
  sed -ri -e 's/bison ([^ ]+) (.*)/byacc \2 \1/g' -e '/^TARGETS/s@arpd@@g' misc/Makefile
  make CPPFLAGS="$CPPFLAGS -Du_int8_t=uint8_t -Du_int16_t=uint16_t -Du_int32_t=uint32_t" DESTDIR="$INSTALL_DIR" PREFIX= LEX=reflex YACC=byacc YACCFLAGS="-d -t -v -L -p ematch_" install
  chroot "$CHROOT_DIR" ln -sf "$INSTALL_DIR/etc/iproute2" /etc
}

DIR_LIBPCAP="libpcap-1.7.4"
SRC_LIBPCAP="$DIR_LIBPCAP.tar.gz"
URL_LIBPCAP="http://www.tcpdump.org/release/$SRC_LIBPCAP"
CHK_LIBPCAP="7ad3112187e88328b85e46dce7a9b949632af18ee74d97ffc3f2b41fe7f448b0"
SUM_LIBPCAP="sha256"
BLD_LIBPCAP() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_LIBNFTNL="libnftnl-1.0.5"
SRC_LIBNFTNL="$DIR_LIBNFTNL.tar.bz2"
URL_LIBNFTNL="http://www.netfilter.org/projects/libnftnl/files/$SRC_LIBNFTNL"
CHK_LIBNFTNL="2ae3172251574ee36077af760933ec0369960a17"
SUM_LIBNFTNL="sha1"
BLD_LIBNFTNL() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_IPTABLES="iptables-1.6.0"
SRC_IPTABLES="$DIR_IPTABLES.tar.bz2"
URL_IPTABLES="http://www.netfilter.org/projects/iptables/files/$SRC_IPTABLES"
CHK_IPTABLES="27ba3451cb622467fc9267a176f19a31"
SUM_IPTABLES="md5"
BLD_IPTABLES() {
  # These TCPOPT definitions are missing from musl
  patch -p0 << 'EOF'
--- extensions/libxt_TCPOPTSTRIP.c.orig
+++ extensions/libxt_TCPOPTSTRIP.c
@@ -12,6 +12,21 @@
 #ifndef TCPOPT_MD5SIG
 #	define TCPOPT_MD5SIG 19
 #endif
+#ifndef TCPOPT_MAXSEG
+#	define TCPOPT_MAXSEG 2
+#endif
+#ifndef TCPOPT_WINDOW
+#	define TCPOPT_WINDOW 3
+#endif
+#ifndef TCPOPT_SACK_PERMITTED
+#	define TCPOPT_SACK_PERMITTED 4
+#endif
+#ifndef TCPOPT_SACK
+#	define TCPOPT_SACK 5
+#endif
+#ifndef TCPOPT_TIMESTAMP
+#	define TCPOPT_TIMESTAMP 8
+#endif
 
 enum {
 	O_STRIP_OPTION = 0,
EOF
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_DOCKER="1.10.2"
DIR_DOCKER="docker-$VER_DOCKER"
SRC_DOCKER="$DIR_DOCKER.tar.gz"
URL_DOCKER="https://github.com/docker/docker/archive/v$VER_DOCKER.tar.gz"
CHK_DOCKER="1326a74fd052db16f1032239fbe48585060acbc0312b8f986974ca993c8ad85c"
SUM_DOCKER="sha256"
BLD_DOCKER() {
  # We have bash v2 without '+=', pipefail, BASH_SOURCE and 'declare -A':
  sed -i -E 's/([A-Z_]+)\+=/\1="$\1"/g' hack/make.sh
  sed -i 's/set -o pipefail//g' hack/make.sh
  sed -i 's/set -e/\0\
BASH_SOURCE="$0"\
source() {\
  local -a BASH_SOURCE_SAVE=("${BASH_SOURCE[@]}")\
  BASH_SOURCE=("$1" "${BASH_SOURCE[@]}")\
  . "$@"\
  BASH_SOURCE=("${BASH_SOURCE_SAVE[@]}")\
}/g' hack/make.sh
  sed -i -E -e 's/declare -A//g' -e 's/([a-z]+)\+=\(/\1=( "${\1[@]}" /g' contrib/check-config.sh
  # make.sh doesn't pass on flags when detecting
  sed -i 's/gcc -/gcc $CPPFLAGS $LDFLAGS -/g' hack/make.sh
  # Allow scratch import from prepare_docker service
  patch -p0 << 'EOF'
--- distribution/pull.go.orig	2016-02-21 22:48:32.906637914 +0000
+++ distribution/pull.go	2016-02-21 22:49:19.881125984 +0000
@@ -183,7 +183,7 @@
 	if name == "" {
 		return fmt.Errorf("Repository name can't be empty")
 	}
-	if name == api.NoBaseImageSpecifier {
+	if os.Getenv("DOCKER_ALLOW_SCRATCH") != "1" && name == api.NoBaseImageSpecifier {
 		return fmt.Errorf("'%s' is a reserved name", api.NoBaseImageSpecifier)
 	}
 	return nil
EOF
  heddle_tmpdir=/tmp
  if [ "$heddle_arch" = armv6l-vb2 ]; then
    mkdir -p heddle_tmp
    heddle_tmpdir="$PWD/heddle_tmp"
  fi
  TMPDIR="$heddle_tmpdir" AUTO_GOPATH=1 DOCKER_GITCOMMIT=c3959b1 CGO_CPPFLAGS="$CPPFLAGS" CGO_LDFLAGS="$LDFLAGS" ./hack/make.sh binary
  rm -f "$INSTALL_DIR/bin/docker"{,-$VER_DOCKER}
  cp -a "bundles/$VER_DOCKER/binary/docker"{,-$VER_DOCKER} "$INSTALL_DIR/bin"
}

VER_RUNIT="2.1.2"
DIR_RUNIT="admin/runit-$VER_RUNIT"
SRC_RUNIT="runit-$VER_RUNIT.tar.gz"
URL_RUNIT="http://smarden.org/runit/$SRC_RUNIT"
CHK_RUNIT="6fd0160cb0cf1207de4e66754b6d39750cff14bb0aa66ab49490992c0c47ba18"
SUM_RUNIT="sha256"
BLD_RUNIT() {
  sed -i "s/\\/usr\\/local/$(echo "$INSTALL_DIR" | sed 's/\//\\\//g')/g" package/upgrade
  sed -i -r 's/^(here=).*/\1"$PWD"/' package/{compile,upgrade}
  sed -i -r -e 's/^.*(ctmp=)/\1/' -e 's/(cat) -v/\1/' src/check-local
  sed -i -e 's/0644/0640/g' -e 's/0744/0740/g' src/svlogd.c
  chroot "$CHROOT_DIR" hush <<EOF
  rm -rf "/package/admin/$(basename "$PWD")"
  mkdir -p /package/admin
  cp -af "$PWD" /package/admin
  cd "/package/admin/$(basename "$PWD")"
  ./package/install
EOF
}

VER_SHUTDOWN="0.3"
DIR_SHUTDOWN="shutdown-$VER_SHUTDOWN"
SRC_SHUTDOWN="$DIR_SHUTDOWN.tar.gz"
GET_SHUTDOWN() {
  mkdir "$DIR_SHUTDOWN"
  cp "$HERE"/../runtime_scripts/{,_}shutdown "$DIR_SHUTDOWN"
  tar -zc "$DIR_SHUTDOWN"
}
BLD_SHUTDOWN() {
  cp * "$INSTALL_DIR/sbin"
}

DIR_CURL="curl-7.47.1"
SRC_CURL="$DIR_CURL.tar.bz2"
URL_CURL="http://curl.haxx.se/download/$SRC_CURL"
CHK_CURL="ddc643ab9382e24bbe4747d43df189a0a6ce38fcb33df041b9cb0b3cd47ae98f"
SUM_CURL="sha256"
BLD_CURL() {
  ./configure "--prefix=$INSTALL_DIR" --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt --with-ca-path=/etc/ssl/certs
  make
  make install
}

DIR_SHADOW="shadow-4.2.1"
SRC_SHADOW="$DIR_SHADOW.tar.xz"
URL_SHADOW="http://pkg-shadow.alioth.debian.org/releases/$SRC_SHADOW"
CHK_SHADOW="3b0893d1476766868cd88920f4f1231c4795652aa407569faff802bcda0f3d41"
SUM_SHADOW="sha256"
BLD_SHADOW() {
  patch -p0 << 'EOF'
--- etc/useradd.orig
+++ etc/useradd
@@ -1,8 +1,8 @@
 # useradd defaults file
-GROUP=1000
+GROUP=100
 HOME=/home
 INACTIVE=-1
 EXPIRE=
-SHELL=/bin/bash
+SHELL=/bin/hush
 SKEL=/etc/skel
-CREATE_MAIL_SPOOL=yes
+CREATE_MAIL_SPOOL=no
EOF
  ./configure "--prefix=$INSTALL_DIR" --sysconfdir=/etc
  make
  chroot "$CHROOT_DIR" hush <<EOF
  cp /etc/login.defs /etc/login.defs.save
  cd "$PWD"
  make install
  mv /etc/login.defs.save /etc/login.defs
EOF
}

VER_SQUASHFS_TOOLS="9c1db6d13a51a2e009f0027ef336ce03624eac0d"
DIR_SQUASHFS_TOOLS="squashfs-tools-$VER_SQUASHFS_TOOLS"
SRC_SQUASHFS_TOOLS="$DIR_SQUASHFS_TOOLS.tar.gz"
URL_SQUASHFS_TOOLS="https://github.com/plougher/squashfs-tools/archive/$VER_SQUASHFS_TOOLS.tar.gz"
CHK_SQUASHFS_TOOLS="4294b3f9be9163bc0c610cf2894e6e0833b23d529296ea3dcb50bfb5ba04739f"
SUM_SQUASHFS_TOOLS="sha256"
BLD_SQUASHFS_TOOLS() {
  # musl is stricter on include locations
  patch -p0 << 'EOF'
--- squashfs-tools/pseudo.c.orig
+++ squashfs-tools/pseudo.c
@@ -32,6 +32,7 @@
 #include <stdlib.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <sys/stat.h>
 #include <ctype.h>
 
 #include "pseudo.h"
EOF
  cd squashfs-tools
  make CPPFLAGS="$CPPFLAGS -DFNM_EXTMATCH=0"
  make INSTALL_DIR="$INSTALL_DIR/bin" install
}

DIR_PARTED="parted-3.2"
SRC_PARTED="$DIR_PARTED.tar.xz"
URL_PARTED="http://ftp.gnu.org/gnu/parted/$SRC_PARTED"
CHK_PARTED="858b589c22297cacdf437f3baff6f04b333087521ab274f7ab677cb8c6bb78e4"
SUM_PARTED="sha256"
BLD_PARTED() {
  # Need _GNU_SOURCE for loff_t in fcntl.h
  patch -p0 << 'EOF'
--- libparted/fs/xfs/xfs.c.orig
+++ libparted/fs/xfs/xfs.c
@@ -18,6 +18,10 @@
 
 #include <config.h>
 
+#define _GNU_SOURCE
+#include <fcntl.h>
+#undef _GNU_SOURCE
+
 #include <parted/parted.h>
 #include <parted/endian.h>
 
EOF
  LIBS=-lintl ./configure "--prefix=$INSTALL_DIR" --without-readline
  make
  make install
}

DIR_POPT="popt-1.16"
SRC_POPT="$DIR_POPT.tar.gz"
URL_POPT="http://rpm5.org/files/popt/$SRC_POPT"
CHK_POPT="e728ed296fe9f069a0e005003c3d6b2dde3d9cad453422a10d6558616d304cc8"
SUM_POPT="sha256"
BLD_POPT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_GPTFDISK="1.0.1"
DIR_GPTFDISK="gptfdisk-$VER_GPTFDISK"
SRC_GPTFDISK="$DIR_GPTFDISK.tar.gz"
URL_GPTFDISK="http://downloads.sourceforge.net/project/gptfdisk/gptfdisk/$VER_GPTFDISK/$SRC_GPTFDISK"
CHK_GPTFDISK="864c8aee2efdda50346804d7e6230407d5f42a8ae754df70404dd8b2fdfaeac7"
SUM_GPTFDISK="sha256"
BLD_GPTFDISK() {
  # musl defines max values without ull so on 32-bit ARM we get a warning.
  # gptfdisk is compiled with -Wall so we can't ignore it.
  # In a simple test app, the correct value is assigned so other pacakges
  # should be OK.
  if [ "$heddle_arch" = armv6l-vb2 ]; then
    patch -p0 << 'EOF'
--- support.cc.orig
+++ support.cc
@@ -22,6 +22,9 @@
 
 #include <sys/types.h>
 
+#undef UINT64_MAX
+#define UINT64_MAX (0xffffffffffffffffull)
+
 // As of 1/2010, BLKPBSZGET is very new, so I'm explicitly defining it if
 // it's not already defined. This should become unnecessary in the future.
 // Note that this is a Linux-only ioctl....
--- gpt.cc.orig
+++ gpt.cc
@@ -28,6 +28,9 @@
 #include "attributes.h"
 #include "diskio.h"
 
+#undef UINT64_MAX
+#define UINT64_MAX (0xffffffffffffffffull)
+
 using namespace std;
 
 #ifdef __FreeBSD__
EOF
  fi
  make sgdisk
  cp sgdisk "$INSTALL_DIR/sbin"
}

DIR_DHCPCD="dhcpcd-6.10.1"
SRC_DHCPCD="$DIR_DHCPCD.tar.xz"
URL_DHCPCD="http://roy.marples.name/downloads/dhcpcd/$SRC_DHCPCD"
CHK_DHCPCD="284abf8c3be0580bbac5eaca95359346ab0d78d4072317b6ce87cc68f2e8ae7b"
SUM_DHCPCD="sha256"
BLD_DHCPCD() {
  ./configure "--prefix=$INSTALL_DIR" "--build=$(echo "$heddle_arch" | cut -d '-' -f 1)-unknown-$(uname -s | tr A-Z a-z)"
  make
  chroot "$CHROOT_DIR" hush <<EOF
  cd "$PWD"
  make install
EOF
}

VER_GLIB="2.46.2"
DIR_GLIB="glib-$VER_GLIB"
SRC_GLIB="$DIR_GLIB.tar.xz"
URL_GLIB="http://ftp.gnome.org/pub/gnome/sources/glib/$(echo "$VER_GLIB" | sed -r 's/([0-9]+\.[0-9]+).*/\1/')/$SRC_GLIB"
CHK_GLIB="5031722e37036719c1a09163cc6cf7c326e4c4f1f1e074b433c156862bd733db"
SUM_GLIB="sha256"
BLD_GLIB() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_PIXMAN="pixman-0.34.0"
SRC_PIXMAN="$DIR_PIXMAN.tar.gz"
URL_PIXMAN="http://cairographics.org/releases/$SRC_PIXMAN"
CHK_PIXMAN="a1b1683c1a55acce9d928fea1ab6ceb79142ddc7"
SUM_PIXMAN="sha1"
BLD_PIXMAN() {
  patch -p0 << 'EOF'
--- pixman/pixman-private.h.orig
+++ pixman/pixman-private.h
@@ -1,5 +1,3 @@
-#include <float.h>
-
 #ifndef PIXMAN_PRIVATE_H
 #define PIXMAN_PRIVATE_H
 
@@ -30,6 +28,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <stddef.h>
+#include <float.h>
 
 #include "pixman-compiler.h"

EOF
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

DIR_QEMU="qemu-2.5.0"
SRC_QEMU="$DIR_QEMU.tar.bz2"
URL_QEMU="http://wiki.qemu-project.org/download/$SRC_QEMU"
CHK_QEMU="3443887401619fe33bfa5d900a4f2d6a79425ae2b7e43d5b8c36eb7a683772d4"
SUM_QEMU="sha256"
BLD_QEMU() {
  # We're not building guest agent so don't test it
  patch -p0 << 'EOF'
--- tests/Makefile.orig
+++ tests/Makefile
@@ -82,7 +82,6 @@
 check-unit-y += tests/test-crypto-cipher$(EXESUF)
 check-unit-$(CONFIG_GNUTLS) += tests/test-crypto-tlscredsx509$(EXESUF)
 check-unit-$(CONFIG_GNUTLS) += tests/test-crypto-tlssession$(EXESUF)
-check-unit-$(CONFIG_LINUX) += tests/test-qga$(EXESUF)
 check-unit-y += tests/test-timed-average$(EXESUF)
 
 check-block-$(CONFIG_POSIX) += tests/qemu-iotests-quick.sh
EOF

  # ide-test fails when VNC is disabled unless we remove -vnc argument:
  patch -p0 << 'EOF'
--- tests/ide-test.c.orig
+++ tests/ide-test.c
@@ -546,7 +546,6 @@
     prepare_blkdebug_script(debug_path, "flush_to_disk");
 
     ide_test_start(
-        "-vnc none "
         "-drive file=blkdebug:%s:%s,if=ide,cache=writeback,format=raw,"
         "rerror=stop,werror=stop",
         debug_path, tmp_path);
EOF

  # byacc uses y prefix by default
  patch -p0 << 'EOF'
--- dtc/Makefile.orig
+++ dtc/Makefile
@@ -258,6 +258,6 @@
 
 %.tab.c %.tab.h %.output: %.y
 	@$(VECHO) BISON $@
-	$(BISON) -d $<
+	$(BISON) -b $* -d $<
 
 FORCE:
EOF
}
BLD_QEMU_x86_64() {
  # Fix integer overflow (when cur is INT64_MAX and then incremented)
  patch -p0 << 'EOF'
--- qapi/string-input-visitor.c.orig
+++ qapi/string-input-visitor.c
@@ -28,7 +28,7 @@
 
     GList *ranges;
     GList *cur_range;
-    int64_t cur;
+    __int128_t cur;
 
     const char *string;
 };
EOF

  # Disable what we don't need
  ./configure \
      "--prefix=$INSTALL_DIR" \
      "--extra-cflags=$CPPFLAGS -ftrapv" \
      --target-list=x86_64-softmmu \
      --disable-guest-agent --disable-sdl --disable-gtk --disable-vte \
      --disable-curses --disable-vnc --disable-xen --disable-brlapi \
      --disable-curl --disable-bluez --disable-rdma --disable-uuid \
      --disable-vde --disable-netmap --disable-cap-ng --disable-attr \
      --disable-spice --disable-rbd --disable-libiscsi --disable-libnfs \
      --disable-smartcard --disable-libusb --disable-usb-redir --disable-lzo \
      --disable-snappy --disable-bzip2 --disable-glusterfs \
      --disable-archipelago --disable-tpm --disable-libssh2 --disable-vhdx \
      --disable-opengl --disable-fdt

  make BISON=byacc LEX=reflex
  make V=1 BISON=byacc LEX=reflex check
  make install
}

VER_UNAME_P="0.0.1"
DIR_UNAME_P="uname_p-$VER_UNAME_P"
SRC_UNAME_P="$DIR_UNAME_P.tar.gz"
GET_UNAME_P() {
  mkdir "$DIR_UNAME_P"
  cat > "$DIR_UNAME_P/uname" << 'EOF'
#!/bin/bash
while getopts :p opt; do
  case $opt in
    p) echo "$heddle_arch"; exit;;
  esac
done
exec /usr/bin/uname "$@"
EOF
  chmod +x "$DIR_UNAME_P/uname"
  tar -zc "$DIR_UNAME_P"
}
BLD_UNAME_P() {
  cp uname "$INSTALL_DIR/bin"
}

VER_READELF_P="0.0.1"
DIR_READELF_P="readelf_p-$VER_READELF_P"
SRC_READELF_P="$DIR_READELF_P.tar.gz"
GET_READELF_P() {
  mkdir "$DIR_READELF_P"
  cat > "$DIR_READELF_P/readelf" << 'EOF'
#!/bin/bash
while getopts :p: opt; do
  case $opt in
    p) /usr/bin/readelf "${@//-p/-x}" | (
       read -r info; echo "$info"
       read -r info; echo "$info" | sed 's/Hex/String/'
       awk '{
         for (i = 2; (i < NF) && (i <= 5); i += 1) {
           for (j = 1; j <= length($i); j += 2) {
             printf("%s", substr($i, j, 2));
           }
         }
       }' | python -c '
import sys, binascii;
while True:
    s = sys.stdin.read(2)
    if not s: break
    sys.stdout.write(binascii.unhexlify(s))' | strings -t x | awk '{
         printf("  [%s]  %s\n", substr($0, 2, 6), substr($0, 9));
       }')
       echo
       exit
  esac
done
exec /usr/bin/readelf "$@"
EOF
  chmod +x "$DIR_READELF_P/readelf"
  tar -zc "$DIR_READELF_P"
}
BLD_READELF_P() {
  cp readelf "$INSTALL_DIR/bin"
}

DIR_KMOD="kmod-22"
SRC_KMOD="$DIR_KMOD.tar.xz"
URL_KMOD="https://www.kernel.org/pub/linux/utils/kernel/kmod/$SRC_KMOD"
CHK_KMOD="ba3b1ddea33228b473189fcb05b809024a3b86e9a7cf37d420cae06beb749f82"
SUM_KMOD="sha256"
BLD_KMOD() {
  ./configure "--prefix=$INSTALL_DIR" --disable-manpages
  make
  make install
  for f in depmod insmod modinfo modprobe rmmod lsmod; do
    ln -sf ../bin/kmod "$INSTALL_DIR/sbin/$f"
  done
}

VER_NATSORT="4c8723dea88f5417735b5d43f43e76efddeece0d"
DIR_NATSORT="natsort-$VER_SQUASHFS_TOOLS"
SRC_NATSORT="$DIR_NATSORT.tar.gz"
URL_NATSORT="https://github.com/sourcefrog/natsort/archive/$VER_NATSORT.tar.gz"
CHK_NATSORT="5f6b93da0729aaf5ce667c448a9dd78f4f7e91b2c8eb4943f1272272449aeb41"
SUM_NATSORT="sha256"
BLD_NATSORT() {
  make
  cp natsort "$INSTALL_DIR/bin"
}

DIR_PCIUTILS="pciutils-3.4.1"
SRC_PCIUTILS="$DIR_PCIUTILS.tar.gz"
URL_PCIUTILS="ftp://atrey.karlin.mff.cuni.cz/pub/linux/pci/$SRC_PCIUTILS"
CHK_PCIUTILS="0196624282c33a9bcd4bd097d4100271c82af47797ecd7488ef2711fa5f043b2"
SUM_PCIUTILS="sha256"
BLD_PCIUTILS() {
  gunzip -f pci.ids.gz
  make PREFIX="$INSTALL_DIR"
  make PREFIX="$INSTALL_DIR" install
}
XTR_PCIUTILS=(any "https://pci-ids.ucw.cz/v2.2/pci.ids.gz" "" "" pci.ids.gz)

DIR_KEXEC_TOOLS="kexec-tools-2.0.11"
SRC_KEXEC_TOOLS="$DIR_KEXEC_TOOLS.tar.xz"
URL_KEXEC_TOOLS="https://kernel.org/pub/linux/utils/kernel/kexec/$SRC_KEXEC_TOOLS"
CHK_KEXEC_TOOLS="b1097986ffdb928cf41a94e8a5dfddc981a8fa710cccf13298e7f8dd939a2ee3"
SUM_KEXEC_TOOLS="sha256"
BLD_KEXEC_TOOLS() {
  # Need _GNU_SOURCE for loff_t in fcntl.h
  patch -p0 << 'EOF'
--- vmcore-dmesg/vmcore-dmesg.c.orig
+++ vmcore-dmesg/vmcore-dmesg.c
@@ -12,7 +12,9 @@
 #include <limits.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#define _GNU_SOURCE
 #include <fcntl.h>
+#undef _GNU_SOURCE
 #include <elf.h>
 #include <stdbool.h>
 #include <inttypes.h>
EOF

  LDFLAGS=-static ./configure
  make
  mkdir -p "$INSTALL_DIR/sbin"
  cp build/sbin/kexec "$INSTALL_DIR/sbin"
}
# Hack: purgatory/arch/x86_64/Makefile uses -mcmodel=large which GCC 4.2.1
# doesn't support. Changing this to -mcmodel=small -fPIE results in the
# following error when kexecing: "Unhandled rela relocation: R_X86_64_PLT32"
# So build x86_64 version on host (assume same architecture).
HST_KEXEC_TOOLS=(x86_64)

DIR_UBOOT="u-boot-2015.01"
SRC_UBOOT="$DIR_UBOOT.tar.bz2"
URL_UBOOT="ftp://ftp.denx.de/pub/u-boot/$SRC_UBOOT"
CHK_UBOOT="383051a656ebe11757b17d38a3326387e4a1b0949ca8a9e8ee506bf71dac9fde"
SUM_UBOOT="sha256"
BLD_UBOOT() {
  # We don't have bc
  patch -p0 << 'EOF'
--- Makefile.orig
+++ Makefile
@@ -858,9 +858,8 @@
 binary_size_check: u-boot.bin FORCE
 	@file_size=$(shell wc -c u-boot.bin | awk '{print $$1}') ; \
 	map_size=$(shell cat u-boot.map | \
-		awk '/_image_copy_start/ {start = $$1} /_image_binary_end/ {end = $$1} END {if (start != "" && end != "") print "ibase=16; " toupper(end) " - " toupper(start)}' \
-		| sed 's/0X//g' \
-		| bc); \
+		awk '/_image_copy_start/ {start = $$1} /_image_binary_end/ {end = $$1} END {if (start != "" && end != "") print "print " end " - " start}' \
+		| python); \
 	if [ "" != "$$map_size" ]; then \
 		if test $$map_size -ne $$file_size; then \
 			echo "u-boot.map shows a binary size of $$map_size" >&2 ; \
EOF

  # ulong is in sys/types.h
  patch -p0 << 'EOF'
--- include/compiler.h.orig
+++ include/compiler.h
@@ -17,6 +17,7 @@
 # include <inttypes.h>
 #elif defined(__linux__) || defined(__WIN32__) || defined(__MINGW32__)
 # include <stdint.h>
+# include <sys/types.h>
 #endif
 
 #include <errno.h>
EOF
}
BLD_UBOOT_armv6l-vb2() {
  # Change boot args, add initrd support and increase RAM to 256Mb
  patch -p0 << 'EOF'
--- include/configs/versatile.h.orig
+++ include/configs/versatile.h
@@ -98,10 +98,10 @@
 #define CONFIG_BOOTP_HOSTNAME
 #define CONFIG_BOOTP_SUBNETMASK
 
-#define CONFIG_BOOTDELAY	2
-#define CONFIG_BOOTARGS		"root=/dev/nfs mem=128M ip=dhcp "\
-				"netdev=25,0,0xf1010000,0xf1010010,eth0 "\
-				"console=ttyAMA0,38400n1"
+#define CONFIG_BOOTDELAY	5
+#define CONFIG_BOOTARGS		"console=ttyAMA0,9600n8 console=tty0"
+#define CONFIG_BOOTCOMMAND	"bootm 0x210000 0x2010000"
+#define CONFIG_INITRD_TAG	1
 
 /*
  * Static configuration when assigning fixed address
@@ -132,7 +132,7 @@
  */
 #define CONFIG_NR_DRAM_BANKS	1	/* we have 1 bank of DRAM */
 #define PHYS_SDRAM_1		0x00000000	/* SDRAM Bank #1 */
-#define PHYS_SDRAM_1_SIZE	0x08000000	/* 128 MB */
+#define PHYS_SDRAM_1_SIZE	0x10000000	/* 256 MB */
 #define PHYS_FLASH_SIZE		0x04000000	/* 64MB */
 
 #define CONFIG_SYS_SDRAM_BASE		PHYS_SDRAM_1
EOF

  make versatileqemu_config all
}

VER_STRACE="4.11"
DIR_STRACE="strace-$VER_STRACE"
SRC_STRACE="$DIR_STRACE.tar.xz"
URL_STRACE="http://downloads.sourceforge.net/project/strace/strace/$VER_STRACE/$SRC_STRACE"
CHK_STRACE="e86a5f6cd8f941f67f3e4b28f4e60f3d9185c951cf266404533210a2e5cd8152"
SUM_STRACE="sha256"
BLD_STRACE() {
  # busybox and toybox don't support \+ in regular expressions
  sed -i '/sed .*/s/\\+/\\{1,\\}/g' Makefile.in mpers.sh
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_EXTRACT_NSS_ROOT_CERTS="492d8c95628eb861a9f1467099936bc2b1fd6a7b"
DIR_EXTRACT_NSS_ROOT_CERTS="extract-nss-root-certs-$VER_EXTRACT_NSS_ROOT_CERTS"
SRC_EXTRACT_NSS_ROOT_CERTS="$DIR_EXTRACT_NSS_ROOT_CERTS.tar.gz"
URL_EXTRACT_NSS_ROOT_CERTS="https://github.com/agl/extract-nss-root-certs/archive/$VER_EXTRACT_NSS_ROOT_CERTS.tar.gz"
CHK_EXTRACT_NSS_ROOT_CERTS="6e29e7b764c34b499571da4baac995910030a4103a96e762c8eba659f806a3b0"
SUM_EXTRACT_NSS_ROOT_CERTS="sha256"
BLD_EXTRACT_NSS_ROOT_CERTS() {
  EXTRACT_NSS_ROOT_CERTS_DIR="$GOPATH/src/github.com/agl/extract-nss-root-certs"
  rm -rf "$EXTRACT_NSS_ROOT_CERTS_DIR"
  mkdir -p "$(dirname "$EXTRACT_NSS_ROOT_CERTS_DIR")"
  cp -a "$PWD" "$EXTRACT_NSS_ROOT_CERTS_DIR"
  cd "$EXTRACT_NSS_ROOT_CERTS_DIR"
  go install
}

VER_HEDDLE_RECV="0.2"
DIR_HEDDLE_RECV="heddle_recv-$VER_HEDDLE_RECV"
SRC_HEDDLE_RECV="$DIR_HEDDLE_RECV.tar.gz"
GET_HEDDLE_RECV() {
  mkdir "$DIR_HEDDLE_RECV"
  cp "$HERE"/../runtime_scripts/heddle_recv.sh "$DIR_HEDDLE_RECV"
  tar -zc "$DIR_HEDDLE_RECV"
}
BLD_HEDDLE_RECV() {
  cp * "$INSTALL_DIR/bin"
}

VER_SENDER="0.2"
DIR_SENDER="sender-$VER_SENDER"
SRC_SENDER="$DIR_SENDER.tar.gz"
URL_SENDER="https://pypi.python.org/packages/source/s/sender/$SRC_SENDER"
CHK_SENDER="5cf51c46af625e7b158915c652ceba4c"
SUM_SENDER="md5"
BLD_SENDER() {
  python setup.py install
}

VER_SMARTMONTOOLS="6.4"
DIR_SMARTMONTOOLS="smartmontools-$VER_SMARTMONTOOLS"
SRC_SMARTMONTOOLS="$DIR_SMARTMONTOOLS.tar.gz"
URL_SMARTMONTOOLS="http://downloads.sourceforge.net/project/smartmontools/smartmontools/$VER_SMARTMONTOOLS/$SRC_SMARTMONTOOLS"
CHK_SMARTMONTOOLS="eab75600c1eda9c34b13097db71138ab376f3dad8a6a4667fb4d1d081feb7a85"
SUM_SMARTMONTOOLS="sha256"
BLD_SMARTMONTOOLS() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}
XTR_SMARTMONTOOLS=(any "http://sourceforge.net/p/smartmontools/code/HEAD/tree/branches/RELEASE_$(echo "$VER_SMARTMONTOOLS" | tr . _)_DRIVEDB/smartmontools/drivedb.h?format=raw" "" "" drivedb.h
                   any "http://sourceforge.net/p/smartmontools/code/HEAD/tree/trunk/smartmontools/drivedb.h?format=raw" "" "" drivedb.h)

PACKAGES=(PKGCONFIG
          LIBFFI
          BZIP2
          ZLIB
          SQLITE
          NCURSES
          PERL
          OPENSSL
          EXPAT
          PYTHON
          PCRE
          LLVM_COMPILER_RT
          GO_BOOTSTRAP
          GO
          LIBAIO
          BOOST
          THIN_PROVISIONING_TOOLS
          LVM
          GETTEXT
          UTIL_LINUX
          LZO
          E2FSPROGS
          BTRFS_PROGS
          CGROUPFS_MOUNT
          BYACC
          REFLEX
          ETHTOOL
          LIBNFNETLINK
          LIBMNL
          LIBNETFILTER_CONNTRACK
          LIBNETFILTER_CTTIMEOUT
          LIBNETFILTER_CTHELPER
          LIBNETFILTER_QUEUE
          LIBTIRPC
          CONNTRACK_TOOLS
          IPROUTE2
          LIBPCAP
          LIBNFTNL
          IPTABLES
          DOCKER
          RUNIT
          SHUTDOWN
          CURL
          SHADOW
          SQUASHFS_TOOLS
          PARTED
          POPT
          GPTFDISK
          DHCPCD
          GLIB
          PIXMAN
          QEMU
          UNAME_P
          READELF_P
          KMOD
          NATSORT
          PCIUTILS
          KEXEC_TOOLS
          UBOOT
          STRACE
          EXTRACT_NSS_ROOT_CERTS
          HEDDLE_RECV
          SENDER
          SMARTMONTOOLS)
